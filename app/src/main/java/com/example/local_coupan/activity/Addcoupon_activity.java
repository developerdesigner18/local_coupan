package com.example.local_coupan.activity;import android.Manifest;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.text.Editable;import android.text.TextWatcher;import android.util.Base64;import android.util.Log;import android.view.Gravity;import android.view.View;import android.view.inputmethod.InputMethodManager;import android.widget.ImageView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import com.bumptech.glide.Glide;import com.example.local_coupan.ApiInterface;import com.example.local_coupan.R;import com.example.local_coupan.RetrofitClient;import com.example.local_coupan.activity.Add_cupoan.AddCoupan;import com.example.local_coupan.activity.Add_cupoan.CouponData;import com.example.local_coupan.databinding.ActivityAddcouponBinding;import com.example.local_coupan.model.Edit__Coupan.EditData;import com.example.local_coupan.model.id_wise_coupon.IdwiseCoupon;import com.example.local_coupan.model.play_pause.PlayPause;import com.example.local_coupan.preferences2;import org.jetbrains.annotations.NotNull;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.MalformedURLException;import java.net.URL;import java.util.Currency;import java.util.HashMap;import java.util.Locale;import java.util.Map;import java.util.concurrent.TimeUnit;import kotlin.jvm.internal.Intrinsics;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.RequestBody;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;import retrofit2.converter.scalars.ScalarsConverterFactory;public abstract class Addcoupon_activity extends AppCompatActivity {    File f;    MultipartBody.Part part;    MultipartBody.Part edit_part_1;    MultipartBody.Part part2;    Bitmap bt7;    Bitmap bt8;    Bitmap bitmap5;    preferences2 preferences;    String finallaunchdate;    String flag;    String finallaunchdateexptiry;    File image;    String campareImage = "no";    ActivityAddcouponBinding binding;    private final int CAMERA_CODE = 101;    public int GALLERY_REQ_CODE;    String image_code = "null";    public static String BASE_URL_PAYMENT = "http://54.90.77.44:8000/payment/";    private Bitmap bitmap;    String base64Image;    //Uri to store the image uri    private Uri filePath;    public Uri imageuri;    File file;    JSONArray arraytext = new JSONArray();    String path;    float deliveryCost2 = 0;    String checkingg = "titel";    String mapping = "0";    @SuppressLint({"ResourceAsColor", "SetTextI18n"})    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        binding = ActivityAddcouponBinding.inflate(getLayoutInflater());        setContentView(binding.getRoot());        checkPermission();  // requesting media storage permission from user        String value = getIntent().getStringExtra("type");        Log.d("devi1", "onCreate: " + value);        String ids = getIntent().getStringExtra("ids");        if (getIntent().getStringExtra("type").equals("1")) {            mapping = "1";            SharedPreferences pref = getSharedPreferences("MySharedPref", MODE_PRIVATE);            SharedPreferences.Editor myEdit = pref.edit();            String title1111 = pref.getString("key_coupon_title", "");            binding.edtEnterTitle.setText(title1111);            String brand1111 = pref.getString("key_brand_name", "");            binding.edtEnterShop.setText(brand1111);            String product1111 = pref.getString("key_product_name", "");            binding.edtEnterProduct.setText(product1111);            binding.edtEnterTitle.addTextChangedListener(new TextWatcher() {                @Override                public void beforeTextChanged(CharSequence s, int start, int count, int after) {                }                @Override                public void onTextChanged(CharSequence s, int start, int before, int count) {                    preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, binding.edtEnterTitle.getText().toString());                    String h = preferences.get(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE);                    Log.d("check_titel_1 ", "onTextChanged: " + h);                    String title = binding.edtEnterTitle.getText().toString();                    myEdit.putString("key_coupon_title", title);                    myEdit.apply();                    Log.d("check_titel_sh1", "onTextChanged: " + pref.getString("key_coupon_title", ""));                }                @Override                public void afterTextChanged(Editable s) {                }            });            binding.edtEnterShop.addTextChangedListener(new TextWatcher() {                @Override                public void beforeTextChanged(CharSequence s, int start, int count, int after) {                }                @Override                public void onTextChanged(CharSequence s, int start, int before, int count) {                    preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, binding.edtEnterShop.getText().toString());                    myEdit.putString("key_brand_name", binding.edtEnterShop.getText().toString());                    myEdit.apply();                }                @Override                public void afterTextChanged(Editable s) {                }            });            binding.edtEnterProduct.addTextChangedListener(new TextWatcher() {                @Override                public void beforeTextChanged(CharSequence s, int start, int count, int after) {                }                @Override                public void onTextChanged(CharSequence s, int start, int before, int count) {                    preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, binding.edtEnterProduct.getText().toString());                    myEdit.putString("key_product_name", binding.edtEnterProduct.getText().toString());                    myEdit.apply();                }                @Override                public void afterTextChanged(Editable s) {                }            });            binding.titel2.setOnFocusChangeListener(new View.OnFocusChangeListener() {                @Override                public void onFocusChange(View v, boolean hasFocus) {                    if (hasFocus) {                        binding.edtEnterTitle.requestFocus();                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                        imm.showSoftInput(binding.edtEnterTitle, InputMethodManager.SHOW_IMPLICIT);                        binding.edtEnterTitle.setSelection(binding.edtEnterTitle.getText().length());                    }                }            });            binding.edtEnterTitle.setOnFocusChangeListener(new View.OnFocusChangeListener() {                @Override                public void onFocusChange(View v, boolean hasFocus) {                    if (hasFocus) {                        binding.titel2.setVisibility(View.GONE);                        binding.titel1.setVisibility(View.VISIBLE);                        binding.edtEnterTitle.requestFocus();                        binding.edtEnterTitle.setGravity(Gravity.LEFT);                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                        imm.showSoftInput(binding.edtEnterTitle, InputMethodManager.SHOW_IMPLICIT);                        binding.edtEnterTitle.setSelection(binding.edtEnterTitle.getText().length());                    } else {                        binding.titel2.setVisibility(View.VISIBLE);                        binding.titel1.setVisibility(View.GONE);                        binding.edtEnterTitle.setVisibility(View.VISIBLE);                        binding.edtEnterTitle.setGravity(Gravity.END);                        checkingg = binding.titel2.getText().toString();                        Log.d("cheninggg", "onFocusChange: 2 " + checkingg);//                        binding.titel2.setText("Copun Titel");                        if (binding.edtEnterTitle.getText().toString().isEmpty()) {                            binding.titel2.setTextColor(getResources().getColor(R.color.black));                            binding.titel2.setHintTextColor(getResources().getColor(R.color.black));                            Log.d("chekhu", "onCreate: true 2");                        } else {                            binding.titel2.setTextColor(getResources().getColor(R.color.greay));                            binding.titel2.setHintTextColor(getResources().getColor(R.color.greay));                            binding.edtEnterTitle.setGravity(Gravity.END);                            Log.d("chekhu", "onCreate: false 2 ");                        }                    }                }            });//            binding.edtEnterTitle.setO//            if (!binding.edtEnterTitle.getText().toString().isEmpty()) {//                Toast.makeText(this, "yes", Toast.LENGTH_SHORT).show();                binding.edtEnterTitle.setGravity(Gravity.END);            } else {//                Toast.makeText(this, "no", Toast.LENGTH_SHORT).show();                binding.edtEnterTitle.setGravity(Gravity.END);            }            binding.titel2Shop.setOnFocusChangeListener(new View.OnFocusChangeListener() {                @Override                public void onFocusChange(View v, boolean hasFocus) {                    if (hasFocus) {                        binding.edtEnterShop.requestFocus();                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                        imm.showSoftInput(binding.edtEnterShop, InputMethodManager.SHOW_IMPLICIT);//                        Toast.makeText(Addcoupon_activity.this, "click", Toast.LENGTH_SHORT).show();                        binding.edtEnterShop.setSelection(binding.edtEnterShop.getText().length());                    }                }            });            binding.edtEnterShop.setOnFocusChangeListener(new View.OnFocusChangeListener() {                @Override                public void onFocusChange(View v, boolean hasFocus) {                    if (hasFocus == true) {                        binding.edtEnterShop.setGravity(Gravity.LEFT);                        binding.titel2Shop.setVisibility(View.GONE);                        binding.titel1Shop.setVisibility(View.VISIBLE);                        binding.edtEnterShop.requestFocus();                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                        imm.showSoftInput(binding.edtEnterShop, InputMethodManager.SHOW_IMPLICIT);                        binding.edtEnterShop.setSelection(binding.edtEnterShop.getText().length());                    } else {                        binding.titel2Shop.setVisibility(View.VISIBLE);                        binding.titel1Shop.setVisibility(View.GONE);                        binding.edtEnterShop.setVisibility(View.VISIBLE);                        binding.edtEnterShop.setGravity(Gravity.END);                        checkingg = binding.titel2Shop.getText().toString();                        Log.d("cheninggg", "onFocusChange: 2 " + checkingg);//                        binding.titel2.setText("Copun Titel");                        if (binding.edtEnterShop.getText().toString().isEmpty()) {                            binding.titel2Shop.setTextColor(getResources().getColor(R.color.black));                            binding.titel2Shop.setHintTextColor(getResources().getColor(R.color.black));                            Log.d("chekhu", "onCreate: true 2");                        } else {                            binding.titel2Shop.setTextColor(getResources().getColor(R.color.greay));                            binding.titel2Shop.setHintTextColor(getResources().getColor(R.color.greay));                            binding.edtEnterShop.setGravity(Gravity.END);                            Log.d("chekhu", "onCreate: false 2 ");                        }                    }                }            });            if (!binding.edtEnterShop.getText().toString().isEmpty()) {                binding.edtEnterShop.setGravity(Gravity.END);            } else {                binding.edtEnterShop.setGravity(Gravity.END);            }            binding.titel2Product.setOnFocusChangeListener(new View.OnFocusChangeListener() {                @Override                public void onFocusChange(View v, boolean hasFocus) {                    if (hasFocus) {                        binding.edtEnterProduct.requestFocus();                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                        imm.showSoftInput(binding.edtEnterProduct, InputMethodManager.SHOW_IMPLICIT);                        binding.edtEnterProduct.setSelection(binding.edtEnterProduct.getText().length());                    }                }            });            binding.edtEnterProduct.setOnFocusChangeListener(new View.OnFocusChangeListener() {                @Override                public void onFocusChange(View v, boolean hasFocus) {                    if (hasFocus == true) {                        binding.edtEnterProduct.setGravity(Gravity.LEFT);                        binding.titel2Product.setVisibility(View.GONE);                        binding.titel1Product.setVisibility(View.VISIBLE);                        binding.edtEnterProduct.requestFocus();                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                        imm.showSoftInput(binding.edtEnterProduct, InputMethodManager.SHOW_IMPLICIT);                        binding.edtEnterProduct.setSelection(binding.edtEnterProduct.getText().length());                    } else {                        binding.titel2Product.setVisibility(View.VISIBLE);                        binding.titel1Product.setVisibility(View.GONE);                        binding.edtEnterProduct.setVisibility(View.VISIBLE);                        binding.edtEnterProduct.setGravity(Gravity.END);                        checkingg = binding.titel2Product.getText().toString();                        Log.d("cheninggg", "onFocusChange: 2 " + checkingg);//                        binding.titel2.setText("Copun Titel");                        if (binding.edtEnterProduct.getText().toString().isEmpty()) {                            binding.titel2Product.setTextColor(getResources().getColor(R.color.black));                            binding.titel2Product.setHintTextColor(getResources().getColor(R.color.black));                            Log.d("chekhu", "onCreate: true 2");                        } else {                            binding.titel2Product.setTextColor(getResources().getColor(R.color.greay));                            binding.titel2Product.setHintTextColor(getResources().getColor(R.color.greay));                            binding.edtEnterProduct.setGravity(Gravity.END);                            Log.d("chekhu", "onCreate: false 2 ");                        }                    }                }            });            if (!binding.edtEnterProduct.getText().toString().isEmpty()) {                binding.edtEnterProduct.setGravity(Gravity.END);            } else {                binding.edtEnterProduct.setGravity(Gravity.END);            }            binding.cardPreviewButton.setVisibility(View.GONE);            SharedPreferences sh = getSharedPreferences("MySharedPref", Context.MODE_PRIVATE);            SharedPreferences.Editor aaaa = pref.edit();            String marketing = sh.getString("marketing", "");            String dealtype = sh.getString("deal_dealtype", "");            String last_image_location = preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File);            String currency = sh.getString("deal_currency", "");            String share = sh.getString("share", "");            String use = sh.getString("use", "");            String Description = sh.getString("deal_Description", "");            String maximumamount = sh.getString("deal_maximumamount", "");            String launch_deal_year = sh.getString("launch_deal_year", "");            String launch_deal_month = sh.getString("launch_deal_month", "");            String launch_deal_date = sh.getString("launch_deal_date", "");            String launch_deal_time = sh.getString("launch_deal_time", "");            String expiry_deal_year = sh.getString("expiry_deal_year", "");            String expiry_deal_month = sh.getString("expiry_deal_month", "");            String expiry_deal_date = sh.getString("expiry_deal_date", "");            String expiry_deal_time = sh.getString("expiry_deal_time", "");            String currentDateandTime1 = sh.getString("currentDateandTime1", "");            String expriree_times1 = sh.getString("expriree_times", "");            Log.d("sharred", "onCreate: " + share);            Log.d("date_tme_value", "onCreate: " + currentDateandTime1);            Log.d("date_tme_value", "onCreate: " + expriree_times1);            String calculation;            String regular_price;            String offer_price;            if (dealtype.equalsIgnoreCase("other")) {//                Toast.makeText(this, "other", Toast.LENGTH_SHORT).show();                calculation = "None";                regular_price = String.valueOf(0);                offer_price = String.valueOf(0);            } else {//                Toast.makeText(this, "Discount", Toast.LENGTH_SHORT).show();                calculation = sh.getString("deal_calculation", "");                regular_price = sh.getString("deal_regular_price", "");                offer_price = sh.getString("deal_offer_price", "");            }            Log.d("launch_deal_year", "onCreate: " + preferences2.get(Addcoupon_activity.this, preferences2.KEY_Type5));            if (preferences2.get(Addcoupon_activity.this, preferences2.KEY_Type5).equals("2")) {                Log.d("date_tme_value", "onCreate: " + expriree_times1);                Log.d("launch_deal_year", "onCreate: " + currentDateandTime1);                Log.d("launch_deal_year", "onCreate: " + expriree_times1);                String strex[] = expriree_times1.split(" ");                Log.d("launch_deal_year", "onCreate: " + strex[0] + " m " + strex[1]);                String exdateformate1[] = strex[0].split("/");                String exdateformate2[] = strex[1].split(":");                finallaunchdateexptiry = exdateformate1[2] + "-" + exdateformate1[1] + "-" + exdateformate1[0] + "T" + exdateformate2[0] + ":" + exdateformate2[1];                Log.d("launch_deal_year", "onCreate: n " + finallaunchdate);                String str[] = currentDateandTime1.split(" ");                Log.d("launch_deal_year", "onCreate: " + str);                Log.d("launch_deal_year", "onCreate: 123" + currentDateandTime1);                String dattefor[] = str[0].split("/");                Log.d("str_values", "onCreate: " + str);                String dattefor2[] = str[1].split(":");                finallaunchdate = dattefor[2] + "-" + dattefor[1] + "-" + dattefor[0] + "T" + dattefor2[0] + ":" + dattefor2[1];                Log.d("launch_deal_year", "onCreate: n " + finallaunchdate + finallaunchdateexptiry);            } else {            }            String txt_location_method = sh.getString("txt_location_method_target", "");            String location_method = sh.getString("method", "");            String txt_journey_type = sh.getString("txt_journey_type_target", "");            String txt_journey_method = sh.getString("txt_journey_method_target", "");//            String txt_time_to_location_type = sh.getString("txt_time_to_location_type_target", "");            String txt_gender_type = sh.getString("txt_gender_type_target", "");            String txt_weather_type = sh.getString("txt_weather_type_target", "");            String get_units = sh.getString("get_units_target", "");            String get_distance = sh.getString("get_distance_target", "");            String txt_min_age = sh.getString("txt_min_age_target", "");            String txt_max_age = sh.getString("txt_max_age_target", "");            String txt_min_temp = sh.getString("txt_min_temp_target", "");            String txt_max_temp = sh.getString("txt_max_temp_target", "");            String termss = sh.getString("termss", "");            String marketing_Group1 = sh.getString("marketGropuArray", "");            Log.d("marketGropuArray", "onCreate: " + marketing_Group1);            String marketing_Group;            if (!marketing_Group1.equals("")) {                marketing_Group = marketing_Group1;                Log.d("marketGropuArray", "onCreate: " + marketing_Group);            } else {                marketing_Group = "{null}";                Log.d("marketGropuArray", "onCreate: " + marketing_Group);            }//            Toast.makeText(this, "terms" + termss, Toast.LENGTH_SHORT).show();            String txt_time_to_location_type = sh.getString("D1", "");            String geofanceDistence = sh.getString("D2", "");            String add1 = sh.getString("address1", "");            String add2 = sh.getString("address2", "");            String tcity = sh.getString("town_city", "");            String pcode = sh.getString("postcode", "");            String optime = sh.getString("opening_times", "");            String latitude = sh.getString("latitude", "");            String longitude = sh.getString("longitude", "");            String country = sh.getString("country", "");            String selectedImageUri = sh.getString("selectedImageUri1", "");            Uri selectedds = Uri.parse(selectedImageUri);            Log.d("selectedImageUri 4 ", "onCreate: " + selectedImageUri);            String messageGropuArray1 = sh.getString("messageGropuArray", "");            String messageGropuArray;            if (!messageGropuArray1.equals("")) {                messageGropuArray = messageGropuArray1;            } else {                messageGropuArray = "{null}";            }//            List<String> myList = new ArrayList<String>(Arrays.asList(marketing_Group.split(",")));//            Log.d("myList","postdata: "+myList);            boolean share1;            if (share.equals("Yes")) {                share1 = true;            } else {                share1 = false;            }            boolean use1;            if (use.equals("Yes")) {                use1 = true;            } else {                use1 = false;            }            //loaction_data//            Bundle b = getIntent().getExtras();//            String final_location = b.getString("Array_location");////            Log.d("final_location", "onCreate: " + final_location);//            Toast.makeText(this, "location" + " " + final_location, Toast.LENGTH_SHORT).show();            Log.d("deal_type_data", "onCreate: " + dealtype + " " + currency + " " + calculation + " " + share + " " + use + " " + Description + " " + maximumamount + " " + regular_price + " " + offer_price + " " + launch_deal_year + " " + launch_deal_month + " " + launch_deal_date + " " + launch_deal_time + " " + expiry_deal_year + " " + expiry_deal_month + " " + expiry_deal_date + " " + expiry_deal_time);            Log.d("target_data", "onCreate: " + txt_location_method + " " + txt_journey_type + " " + txt_journey_method + " " + txt_time_to_location_type + " " + txt_gender_type + " " + txt_weather_type + " " + txt_min_age + " " + txt_max_age + " " + txt_min_temp + " " + txt_max_temp + " " + get_units + " " + get_distance);            String detroye = preferences.get(Addcoupon_activity.this, preferences.KEY_Detroye);            Log.d("detroye", "onCreate: ");//            if (detroye.equals("0")) {//                preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(""));//                preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(""));//                preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(""));//                preferences.save(Addcoupon_activity.this, preferences.KEY_Bitmap, String.valueOf(""));//                preferences.save(Addcoupon_activity.this, preferences.KEY_Part, String.valueOf(""));////                preferences.save(Addcoupon_activity.this, preferences.KEY_File, String.valueOf(""));//                preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(""));//                preferences.save(Addcoupon_activity.this, preferences.Key_budget, String.valueOf(""));//                Log.d("saveimag", "onCreate: j");//            }            String title = preferences.get(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE);            String brand1 = preferences.get(Addcoupon_activity.this, preferences.KEY_BRAND_NAME);            String product1 = preferences.get(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME);            String deliveryCost11 = preferences.get(Addcoupon_activity.this, preferences.Key_delevary);            String part5 = preferences.get(Addcoupon_activity.this, preferences.KEY_Part);            String filesss = preferences.get(Addcoupon_activity.this, preferences.KEY_File);            String bitmap5 = preferences.get(Addcoupon_activity.this, preferences.KEY_Bitmap);            Log.d("saveimag", "onCreate: " + bitmap5);//          bitmap = bitmap5;            Log.d("deliveryCost11", "onCreate: " + deliveryCost11);            if (deliveryCost11.equals("")) {                deliveryCost2 = 0;            } else {                deliveryCost2 = Float.parseFloat(deliveryCost11);            }            preferences.save(Addcoupon_activity.this, preferences.KEY_Detroye, String.valueOf("2"));            String destroye2 = preferences.get(Addcoupon_activity.this, preferences.Key_delevary);//            binding.txtDeliveryCharge.setText(destroye2);//            binding.edtEnterTitle.setText(title);//            binding.edtEnterShop.setText(brand1);//            binding.edtEnterProduct.setText(product1);//            binding.edtEnterProduct.setText(product1);            part = createpart(filesss);            part2 = createpart2(last_image_location);            Bitmap bt5 = StringToBitMap(bitmap5);            binding.imgFromUser.setImageBitmap(bt5);            Log.d("saveimag m ", "onCreate: " + bt5);            String alloverbudget = sh.getString("edt_enter_overallbudget", "");            String maximumbudget = sh.getString("edt_entermaximumbudget", "");            Log.d("viru_budget5", "onCreate: " + alloverbudget + " " + maximumbudget);            if (!alloverbudget.isEmpty()) {//                Toast.makeText(this, "not empty", Toast.LENGTH_SHORT).show();                binding.txtBudgetPrice.setText(alloverbudget);            } else if (!alloverbudget.isEmpty()) {//                Toast.makeText(this, "empty", Toast.LENGTH_SHORT).show();                binding.txtBudgetPrice.setText("");            }//            binding.btnCopy.setOnClickListener(v -> {////                Log.d("jsonArray c ", "onCreate: " + part);////                String final_location = sh.getString("Array_location", "");////                String result22 = final_location.substring(1, final_location.length() - 1);////                Log.d("myList", "postdata: " + result22);////////                List<String> myList = new ArrayList<String>(Arrays.asList(result22.split(",")));////                ArrayList<String> strinfArraylist = new ArrayList<String>(myList);////////                ArrayList<String> arrayobkects = new ArrayList<>();////                arrayobkects.add(result22);////////                Log.d("myList", "postdata: " + arrayobkects);////                Log.d("deviaddd 1", "onCreate: " + final_location);////            });//            binding.btnNext.setOnClickListener(new View.OnClickListener() {//                @Override//                public void onClick(View v) {////                    flag = "next";//                    Log.d("finallaunchdate", "onClick: " + finallaunchdate + " " + finallaunchdateexptiry);////                    Log.d("postdata", "onClick: " + regular_price + " " + add1 + " " + txt_weather_type + " " + alloverbudget + " " + termss + " " + binding.edtEnterTitle.getText().toString() + " " + binding.edtEnterShop.getText().toString() + " " + binding.edtEnterProduct.getText().toString() + " " + binding.txtDeliveryCharge.getText().toString());////                    String country_code = getCountryCode(country);////                    Toast.makeText(Addcoupon_activity.this, "1" + country_code, Toast.LENGTH_SHORT).show();//                    String currency_type1 = Currency.getInstance(new Locale("", country_code)).getCurrencyCode();////                    Toast.makeText(Addcoupon_activity.this, "" + currency_type1, Toast.LENGTH_SHORT).show();//                    String cu = currency;////                    String[] curr = {"USD", "GBP", "KES", "XOF", "EUR"};////                    if (currency_type1.equals(cu)) {////                        if (!currency_type1.contains(Arrays.toString(curr))) {//                            cu = "USD";//                        } else {//                            cu = currency;////                        Toast.makeText(Addcoupon_activity.this, "Matched", Toast.LENGTH_SHORT).show()//                        }////                    } else {//                        cu = "USD";//                    }////                    if (!regular_price.equals("") &&//                            !add1.equals("") &&//                            !txt_weather_type.equals("") &&//                            !alloverbudget.equals("") &&//                            !termss.equals("") &&//                            !binding.edtEnterTitle.getText().toString().isEmpty() &&//                            !binding.edtEnterShop.getText().toString().isEmpty() &&//                            !binding.edtEnterProduct.getText().toString().isEmpty()////                            && !binding.txtDeliveryCharge.getText().toString().isEmpty()//                            && !preferences.get(Addcoupon_activity.this, preferences.KEY_Bitmap).equals("")) {////                        String market_group = marketing_Group.substring(1, marketing_Group.length() - 1);//////                        String message_group = messageGropuArray.substring(1, messageGropuArray.length() - 1);//                        Log.d("marketGroupArray", "onCreate: " + market_group);//                        binding.progressbarList.setVisibility(View.VISIBLE);//                        String ids = preferences.get(Addcoupon_activity.this, preferences.KEY_ID);//                        postdata(title, brand1, brand1, product1, product1, dealtype, cu, finallaunchdate, "0000-00-00T00:00:00", finallaunchdateexptiry, "0000-00-00T00:00:00", share1, use1, Integer.valueOf(maximumamount), add1, add2, tcity, tcity, pcode, optime, message_group, geofanceDistence, txt_journey_method, Integer.valueOf(txt_min_age), Integer.valueOf(txt_max_age), txt_gender_type, Integer.valueOf(txt_max_temp), Integer.valueOf(txt_min_temp), Integer.valueOf(alloverbudget), get_units, 0, "txt_location_method", "get_units", termss, txt_weather_type, "txt_time_to_location_type", calculation, Integer.valueOf(alloverbudget), Integer.valueOf(maximumbudget), country, ids, Description, market_group, part, Integer.valueOf(regular_price), Integer.valueOf(offer_price), true, Float.valueOf(alloverbudget), part2, 0.02f, longitude, latitude, txt_location_method, txt_journey_method, txt_time_to_location_type, get_units, geofanceDistence);//////                        Log.d("dataPpost", "onClick: " + title + brand1 + brand1 + product1 + product1 + dealtype + currency + finallaunchdate +////                                "0000-00-00T00:00:00" + finallaunchdateexptiry +////                                "0000-00-00T00:00:00" + share1 + use1 + Integer.valueOf(maximumamount) + add1 + add2 +////                                tcity + tcity + pcode + optime + "0" + geofanceDistence + txt_journey_type +////                                Integer.valueOf(txt_min_age) + Integer.valueOf(txt_max_age) + txt_gender_type +////                                Integer.valueOf(txt_max_temp) + Integer.valueOf(txt_min_temp) + Integer.valueOf(alloverbudget) +////                                get_units + 0 + txt_location_method + get_units + termss + txt_weather_type + txt_time_to_location_type +////                                calculation + Integer.valueOf(alloverbudget) + Integer.valueOf(maximumbudget) + country +////                                ids + Description + market_group + part + Integer.valueOf(regular_price) + Integer.valueOf(offer_price) +////                                true + Float.valueOf(alloverbudget) + part2 + deliveryCost2 + longitude + latitude);////                    } else {//                        Toast.makeText(Addcoupon_activity.this, "Please Fill Every Fields", Toast.LENGTH_SHORT).show();//                    }//                }//            });            binding.btnNext.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    flag = "next";                    String ids = preferences.get(Addcoupon_activity.this, preferences.KEY_ID);                    Log.d("bitmapimage part", "onClick: " + part);//                    String final_location = sh.getString("Array_location", "");//                    String result22 = final_location.substring(1, final_location.length() - 1);//                    Log.d("myList", "postdata: " + result22);//                    List<String> myList = new ArrayList<String>(Arrays.asList(result22.split(",")));//                    ArrayList<String> strinfArraylist = new ArrayList<String>(myList);////                    ArrayList<String> arrayobkects = new ArrayList<>();//                    arrayobkects.add(result22);////                    Log.d("myList", "postdata: " + arrayobkects);//                    Log.d("deviaddd 1", "onCreate: " + final_location);//                    String imageuri =  getIntent().getStringExtra("Username");//                   String imageuri =  "content://com.android.providers.media.documents/document/image%3A2442";////                    ArrayList<String> arrayobkects = new ArrayList<>();//                    arrayobkects.add(result22);                    Log.d("finallaunchdate", "onClick: " + finallaunchdate + " " + finallaunchdateexptiry);                    Log.d("postdata", "onClick: " + regular_price + " " + add1 + " " + txt_weather_type + " " + alloverbudget + " " + termss + " " + binding.edtEnterTitle.getText().toString() + " " + binding.edtEnterShop.getText().toString() + " " + binding.edtEnterProduct.getText().toString() + " " + binding.txtDeliveryCharge.getText().toString());                    if (!regular_price.equals("") &&                            !add1.equals("") &&                            !txt_weather_type.equals("") &&                            !alloverbudget.equals("") &&                            !termss.equals("") &&                            !binding.edtEnterTitle.getText().toString().isEmpty() &&                            !binding.edtEnterShop.getText().toString().isEmpty() &&                            !binding.edtEnterProduct.getText().toString().isEmpty()//                            && !binding.txtDeliveryCharge.getText().toString().isEmpty()                            && !preferences.get(Addcoupon_activity.this, preferences.KEY_Bitmap).equals("")) {                        String country_code = getCountryCode(country);//                    Toast.makeText(Addcoupon_activity.this, "1" + country_code, Toast.LENGTH_SHORT).show();                        String currency_type1 = Currency.getInstance(new Locale("", country_code)).getCurrencyCode();//                    Toast.makeText(Addcoupon_activity.this, "" + currency_type1, Toast.LENGTH_SHORT).show();                        String cu = currency;                        if (currency_type1.equals(cu)) {//                        Toast.makeText(Addcoupon_activity.this, "Matched", Toast.LENGTH_SHORT).show();                        } else {                            cu = "USD";                        }                        String market_group = marketing_Group.substring(1, marketing_Group.length() - 1);                        String message_group = messageGropuArray.substring(1, messageGropuArray.length() - 1);                        Log.d("marketGroupArray", "onCreate: " + market_group);                        binding.progressbarList.setVisibility(View.VISIBLE);                        Log.d("check_on_save1", "onClick: " + title);                        Log.d("check_on_save2", "onClick: " + binding.edtEnterTitle.getText().toString());                        String titelfinal = binding.edtEnterTitle.getText().toString();                        String brandfinal = binding.edtEnterShop.getText().toString();                        String productfinal = binding.edtEnterProduct.getText().toString();                        postdata(titelfinal, brandfinal, brandfinal, productfinal, productfinal, dealtype, cu, finallaunchdate, "0000-00-00T00:00:00", finallaunchdateexptiry, "0000-00-00T00:00:00", share1, use1, Integer.valueOf(maximumamount), add1, add2, tcity, tcity, pcode, optime, message_group, geofanceDistence, txt_journey_method, Integer.valueOf(txt_min_age), Integer.valueOf(txt_max_age), txt_gender_type, Integer.valueOf(txt_max_temp), Integer.valueOf(txt_min_temp), Integer.valueOf(alloverbudget), get_units, 0, "txt_location_method", "get_units", termss, txt_weather_type, "txt_time_to_location_type", calculation, Integer.valueOf(alloverbudget), Integer.valueOf(maximumbudget), country, ids, Description, market_group, part, Integer.valueOf(regular_price), Integer.valueOf(offer_price), true, Float.valueOf(alloverbudget), part2, 0.02f, longitude, latitude, txt_location_method, txt_journey_method, txt_time_to_location_type, get_units, geofanceDistence);//                        Log.d("dataPpost", "onClick: " + title + brand1 + brand1 + product1 + product1 + dealtype + currency + finallaunchdate +//                                "0000-00-00T00:00:00" + finallaunchdateexptiry +//                                "0000-00-00T00:00:00" + share1 + use1 + Integer.valueOf(maximumamount) + add1 + add2 +//                                tcity + tcity + pcode + optime + "0" + geofanceDistence + txt_journey_type +//                                Integer.valueOf(txt_min_age) + Integer.valueOf(txt_max_age) + txt_gender_type +//                                Integer.valueOf(txt_max_temp) + Integer.valueOf(txt_min_temp) + Integer.valueOf(alloverbudget) +//                                get_units + 0 + txt_location_method + get_units + termss + txt_weather_type + txt_time_to_location_type +//                                calculation + Integer.valueOf(alloverbudget) + Integer.valueOf(maximumbudget) + country +//                                ids + Description + market_group + part + Integer.valueOf(regular_price) + Integer.valueOf(offer_price) +//                                true + Float.valueOf(alloverbudget) + part2 + deliveryCost2 + longitude + latitude);                    } else {                        Toast.makeText(Addcoupon_activity.this, "Please Fill Every Fields", Toast.LENGTH_SHORT).show();                    }                }            });            binding.btnSave.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    flag = "save";                    String ids = preferences.get(Addcoupon_activity.this, preferences.KEY_ID);                    Log.d("bitmapimage part", "onClick: " + part);//                    String final_location = sh.getString("Array_location", "");//                    String result22 = final_location.substring(1, final_location.length() - 1);//                    Log.d("myList", "postdata: " + result22);//                    List<String> myList = new ArrayList<String>(Arrays.asList(result22.split(",")));//                    ArrayList<String> strinfArraylist = new ArrayList<String>(myList);////                    ArrayList<String> arrayobkects = new ArrayList<>();//                    arrayobkects.add(result22);////                    Log.d("myList", "postdata: " + arrayobkects);//                    Log.d("deviaddd 1", "onCreate: " + final_location);//                    String imageuri =  getIntent().getStringExtra("Username");//                   String imageuri =  "content://com.android.providers.media.documents/document/image%3A2442";////                    ArrayList<String> arrayobkects = new ArrayList<>();//                    arrayobkects.add(result22);                    Log.d("finallaunchdate", "onClick: " + finallaunchdate + " " + finallaunchdateexptiry);                    Log.d("postdata", "onClick: " + regular_price + " " + add1 + " " + txt_weather_type + " " + alloverbudget + " " + termss + " " + binding.edtEnterTitle.getText().toString() + " " + binding.edtEnterShop.getText().toString() + " " + binding.edtEnterProduct.getText().toString() + " " + binding.txtDeliveryCharge.getText().toString());                    if (!regular_price.equals("") &&                            !add1.equals("") &&                            !txt_weather_type.equals("") &&                            !alloverbudget.equals("") &&                            !termss.equals("") &&                            !binding.edtEnterTitle.getText().toString().isEmpty() &&                            !binding.edtEnterShop.getText().toString().isEmpty() &&                            !binding.edtEnterProduct.getText().toString().isEmpty()//                            && !binding.txtDeliveryCharge.getText().toString().isEmpty()                            && !preferences.get(Addcoupon_activity.this, preferences.KEY_Bitmap).equals("")) {                        String country_code = getCountryCode(country);//                    Toast.makeText(Addcoupon_activity.this, "1" + country_code, Toast.LENGTH_SHORT).show();                        String currency_type1 = Currency.getInstance(new Locale("", country_code)).getCurrencyCode();//                    Toast.makeText(Addcoupon_activity.this, "" + currency_type1, Toast.LENGTH_SHORT).show();                        String cu = currency;                        if (currency_type1.equals(cu)) {//                        Toast.makeText(Addcoupon_activity.this, "Matched", Toast.LENGTH_SHORT).show();                        } else {                            cu = "USD";                        }                        String market_group = marketing_Group.substring(1, marketing_Group.length() - 1);                        String message_group = messageGropuArray.substring(1, messageGropuArray.length() - 1);                        Log.d("marketGroupArray", "onCreate: " + market_group);                        binding.progressbarList.setVisibility(View.VISIBLE);                        String h = preferences.get(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE);                        Log.d("check_titel_1 ", "onTextChanged: " + h);                        Log.d("check_on_save1", "onClick: " + title); //null//                        String title = binding.edtEnterTitle.getText().toString();                        String titelfinal = binding.edtEnterTitle.getText().toString();                        String brandfinal = binding.edtEnterShop.getText().toString();                        String productfinal = binding.edtEnterProduct.getText().toString();                        Log.d("check_on_save2", "onClick: " + binding.edtEnterTitle.getText().toString());                        postdata(titelfinal, brandfinal, brandfinal, productfinal, productfinal, dealtype, cu, finallaunchdate, "0000-00-00T00:00:00", finallaunchdateexptiry, "0000-00-00T00:00:00", share1, use1, Integer.valueOf(maximumamount), add1, add2, tcity, tcity, pcode, optime, message_group, geofanceDistence, txt_journey_method, Integer.valueOf(txt_min_age), Integer.valueOf(txt_max_age), txt_gender_type, Integer.valueOf(txt_max_temp), Integer.valueOf(txt_min_temp), Integer.valueOf(alloverbudget), get_units, 0, "txt_location_method", "get_units", termss, txt_weather_type, "txt_time_to_location_type", calculation, Integer.valueOf(alloverbudget), Integer.valueOf(maximumbudget), country, ids, Description, market_group, part, Integer.valueOf(regular_price), Integer.valueOf(offer_price), true, Float.valueOf(alloverbudget), part2, 0.02f, longitude, latitude, txt_location_method, txt_journey_method, txt_time_to_location_type, get_units, geofanceDistence);//                        Log.d("dataPpost", "onClick: " + title + brand1 + brand1 + product1 + product1 + dealtype + currency + finallaunchdate +//                                "0000-00-00T00:00:00" + finallaunchdateexptiry +//                                "0000-00-00T00:00:00" + share1 + use1 + Integer.valueOf(maximumamount) + add1 + add2 +//                                tcity + tcity + pcode + optime + "0" + geofanceDistence + txt_journey_type +//                                Integer.valueOf(txt_min_age) + Integer.valueOf(txt_max_age) + txt_gender_type +//                                Integer.valueOf(txt_max_temp) + Integer.valueOf(txt_min_temp) + Integer.valueOf(alloverbudget) +//                                get_units + 0 + txt_location_method + get_units + termss + txt_weather_type + txt_time_to_location_type +//                                calculation + Integer.valueOf(alloverbudget) + Integer.valueOf(maximumbudget) + country +//                                ids + Description + market_group + part + Integer.valueOf(regular_price) + Integer.valueOf(offer_price) +//                                true + Float.valueOf(alloverbudget) + part2 + deliveryCost2 + longitude + latitude);                    } else {                        Toast.makeText(Addcoupon_activity.this, "Please Fill Every Fields", Toast.LENGTH_SHORT).show();                    }                }            });            binding.lloutDeal.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    String coupon_title = binding.edtEnterTitle.getText().toString();                    String brand = binding.edtEnterShop.getText().toString();                    String product = binding.edtEnterProduct.getText().toString();//                    String delevery = binding.txtDeliveryCharge.getText().toString();                    String budget123 = binding.txtBudgetPrice.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.Key_budget, String.valueOf(budget123));                    preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                    preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                    preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));//                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                    Intent get_deal = new Intent(Addcoupon_activity.this, Coupon_deal_activity.class);                    get_deal.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    get_deal.putExtra("type", "1");                    get_deal.putExtra("type2", "10");                    get_deal.putExtra("navigate", "null");                    get_deal.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    startActivity(get_deal);                }            });//done            binding.lloutLocation.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    String coupon_title = binding.edtEnterTitle.getText().toString();                    String brand = binding.edtEnterShop.getText().toString();                    String product = binding.edtEnterProduct.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                    preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                    preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                    String delevery = binding.txtDeliveryCharge.getText().toString();//                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                    String budget123 = binding.txtBudgetPrice.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.Key_budget, String.valueOf(budget123));                    Intent get_location = new Intent(Addcoupon_activity.this, location_activity.class);                    get_location.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    get_location.putExtra("type", "1");                    get_location.putExtra("type2", "10");                    get_location.putExtra("Array", String.valueOf(arraytext));                    get_location.putExtra("navigate", "111");                    startActivity(get_location);                }            });//done            binding.imgBackCurrency.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    onBackPressed();                }            });            binding.lloutTarget.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    String coupon_title = binding.edtEnterTitle.getText().toString();                    String brand = binding.edtEnterShop.getText().toString();                    String product = binding.edtEnterProduct.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                    preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                    preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                    String delevery = binding.txtDeliveryCharge.getText().toString();//                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                    String budget123 = binding.txtBudgetPrice.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.Key_budget, String.valueOf(budget123));                    Intent get_target = new Intent(Addcoupon_activity.this, Target_activity.class);                    get_target.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    get_target.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    get_target.putExtra("type", "1");                    get_target.putExtra("type2", "10");//                    get_target.putExtra("return", "no");                    aaaa.putString("return", "no");                    startActivity(get_target);                }            });//done            binding.lloutbudget.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    String coupon_title = binding.edtEnterTitle.getText().toString();                    String brand = binding.edtEnterShop.getText().toString();                    String product = binding.edtEnterProduct.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                    preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                    preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                    String delevery = binding.txtDeliveryCharge.getText().toString();//                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                    String budget123 = binding.txtBudgetPrice.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.Key_budget, String.valueOf(budget123));                    Intent get_allbudget = new Intent(Addcoupon_activity.this, overallbudget_activity.class);                    get_allbudget.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    get_allbudget.putExtra("type", "1");                    get_allbudget.putExtra("type2", "10");                    startActivity(get_allbudget);                }            });//done            binding.cardPreviewButton.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    String coupon_title = binding.edtEnterTitle.getText().toString();                    String brand = binding.edtEnterShop.getText().toString();                    String product = binding.edtEnterProduct.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                    preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                    preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                    String delevery = binding.txtDeliveryCharge.getText().toString();//                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                    String budget123 = binding.txtBudgetPrice.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.Key_budget, String.valueOf(budget123));                    Intent get_preview = new Intent(Addcoupon_activity.this, Coupon_details.class);                    get_preview.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    startActivity(get_preview);                }            });            binding.llouttearms.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d("cjekinggg", "onClick: 1 " + checkingg);                    Log.d("cjekinggg", "onClick: 2 " + binding.edtEnterTitle.getText().toString());                    String coupon_title = binding.edtEnterTitle.getText().toString();                    String brand = binding.edtEnterShop.getText().toString();                    String product = binding.edtEnterProduct.getText().toString();                    String budget123 = binding.txtBudgetPrice.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.Key_budget, String.valueOf(budget123));                    preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                    preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                    preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                    String delevery = binding.txtDeliveryCharge.getText().toString();//                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                    Intent get_terms = new Intent(Addcoupon_activity.this, Terms_activity.class);                    get_terms.putExtra("type", "1");                    get_terms.putExtra("type2", "10");                    get_terms.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    startActivity(get_terms);                }            });            binding.lloutImgFromUser.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    String coupon_title = binding.edtEnterTitle.getText().toString();                    String brand = binding.edtEnterShop.getText().toString();                    String product = binding.edtEnterProduct.getText().toString();                    String budget123 = binding.txtBudgetPrice.getText().toString();                    preferences.save(Addcoupon_activity.this, preferences.Key_budget, String.valueOf(budget123));                    preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                    preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                    preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                    String delevery = binding.txtDeliveryCharge.getText().toString();//                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                    if (Build.VERSION.SDK_INT >= 23) {                        if (checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {                            selectImage();                        } else {                            ActivityCompat.requestPermissions(Addcoupon_activity.this, new String[]{Manifest.permission.CAMERA}, 1);                            if (checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {//                                Toast.makeText(Addcoupon_activity.this, "if", Toast.LENGTH_SHORT).show();                                image_code = "add";                                Log.d("devi1", "onClick: add " + image_code);//                                 Intent intent = new Intent(Addcoupon_activity.this, Image_set_Activity.class);//                                startActivity(intent);                                selectImage();                            } else {                                Log.d("devi1", "onClick: 2 else");//                                Toast.makeText(Addcoupon_activity.this, "else", Toast.LENGTH_SHORT).show();                            }                        }                    } else {                        Log.d("devi1", "onClick: 1 else");                    }                }            });        }        else if (getIntent().getStringExtra("type").equalsIgnoreCase("2")){            mapping = "2";            binding.titel2.setEnabled(false);            binding.titel2Shop.setEnabled(false);            binding.titel2Product.setEnabled(false);            binding.imgBudget.setVisibility(View.INVISIBLE);            SharedPreferences pref = getSharedPreferences("MySharedPref", Context.MODE_PRIVATE);            SharedPreferences.Editor myedit = pref.edit();            SharedPreferences sh = getSharedPreferences("MySharedPref", MODE_PRIVATE);            String title = sh.getString("title", "");            String brand = sh.getString("brand", "");            String Product = sh.getString("Product", "");            String town_city = sh.getString("town_city", "");            String country = sh.getString("country", "");            String deal = sh.getString("deal", "");            String set_target = sh.getString("method", "");            String overall_budget = sh.getString("overall_budget", "");            binding.txtTargetSet.setText(set_target);            binding.txtBudgetPrice.setText(overall_budget);            binding.txtLocationMap.setText(town_city + " , " + country);            binding.txtDealDiscount.setText(deal);            binding.edtEnterTitle.setText(title);            binding.edtEnterProduct.setText(Product);            binding.edtEnterShop.setText(brand);            binding.edtEnterTitle.setGravity(Gravity.END);            binding.edtEnterShop.setGravity(Gravity.END);            binding.edtEnterProduct.setGravity(Gravity.END);            binding.txtDealDiscount.setTextColor(Color.BLACK);            binding.txtLocationMap.setTextColor(Color.BLACK);            binding.txtTargetSet.setTextColor(Color.BLACK);            boolean payment = sh.getBoolean("payment_success", true);            if (payment) {                binding.btnNext.setVisibility(View.GONE);            } else {                binding.btnNext.setVisibility(View.VISIBLE);            }            if (getIntent().getStringExtra("type2").equalsIgnoreCase("20")) {                binding.progressbarList.setVisibility(View.VISIBLE);                String ids1 = sh.getString("ids12", "");                id_vise_coupon_data(ids1);            }            Handler handler = new Handler();            handler.postDelayed(new Runnable() {                @SuppressLint("LongLogTag")                public void run() {//                    String title = sh.getString("title", "");                    String Copon_image = sh.getString("Copon_image", "");//                    String brand = sh.getString("brand", "");//                    String Product = sh.getString("Product", "");//                    String budget = sh.getString("budget", "");//                    String delivery_cost = sh.getString("delivery_cost", "");                    String location_image = sh.getString("location_image", "");//                    String currency_symbol = sh.getString("currency_symbol", "");                    final String[] last_image_location = {preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File)};                    Log.d("filejkeyvaluelocation 1", "run: " + location_image);                    String image1 = location_image;                    URL url3 = null;                    try {                        url3 = new URL(image1);                    } catch (MalformedURLException e) {                        e.printStackTrace();                    }                    if (!last_image_location[0].isEmpty()) {                    } else {                        if (url3 == null) {//                        Toast.makeText(Addcoupon_activity.this, "n2", Toast.LENGTH_SHORT).show();                        } else {                            new GetImageFromUrl3().execute(String.valueOf(url3));                            Handler handler = new Handler();                            handler.postDelayed(new Runnable() {                                @SuppressLint("LongLogTag")                                public void run() {                                    //create a file to wrtite bitmap data                                    Log.d("filejkeyvaluelocation", "run: " + preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File));                                    if (preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File).equals("")) {                                        Log.d("filejkeyvaluelocation", "run: 2");//                                        Toast.makeText(location_activity.this, "run", Toast.LENGTH_SHORT).show();                                        File l = new File(Addcoupon_activity.this.getCacheDir(), "location_img.JPEG");                                        try {                                            l.createNewFile();                                        } catch (IOException e) {                                            e.printStackTrace();                                        }                                        //convert bitmat to byte by byte                                        Bitmap bitmap15 = bt8;                                        if (bitmap15 != null) {                                            ByteArrayOutputStream bos = new ByteArrayOutputStream();                                            bitmap15.compress(Bitmap.CompressFormat.JPEG, 60, bos);                                            byte[] bitmapdata = bos.toByteArray();                                            //writte the bites in file                                            try {                                                FileOutputStream fos = new FileOutputStream(l);                                                fos.write(bitmapdata);                                                fos.flush();                                                fos.close();                                            } catch (FileNotFoundException e) {                                                Log.d("devi1location FileNotFoundException ", "run: " + e);                                                e.printStackTrace();                                            } catch (IOException e) {                                                e.printStackTrace();                                                Log.d("devi1location FileNotFoundException2 ", "run: " + e);                                            }                                            Log.d("devi1urllocation 12", "run: " + l);                                            preferences.save(Addcoupon_activity.this, preferences.KEY_Location_File, String.valueOf(l));                                        } else {                                            Log.d("bitmap", "run: null image");                                        }                                    } else {                                        Log.d("filejkeyvaluelocation", "run: 1");//                                        Toast.makeText(location_activity.this, "wait", Toast.LENGTH_SHORT).show();                                    }                                }                            }, 10000);                        }                    }                    Log.d("devi90", "onCreate: " + Copon_image);                    URL url = null;                    try {                        url = new URL(Copon_image);                        Log.d("url123", "onCreate: " + url);                    } catch (MalformedURLException e) {                        e.printStackTrace();                        Log.d("url123 e ", "onCreate: " + e);                    }                    Log.d("url1234", "onCreate: " + url);                    final String last_image = preferences.get(Addcoupon_activity.this, preferences.KEY_Bitmap);                    if (!last_image.isEmpty()) {                        String bitmap5 = preferences.get(Addcoupon_activity.this, preferences.KEY_Bitmap);                        Bitmap bt5 = StringToBitMap(bitmap5);                        binding.imgFromUser.setImageBitmap(bt5);//                        Toast.makeText(Addcoupon_activity.this, "new", Toast.LENGTH_SHORT).show();                    } else {                        new GetImageFromUrl().execute(String.valueOf(url));//                        Toast.makeText(Addcoupon_activity.this, "old", Toast.LENGTH_SHORT).show();                        Handler handler = new Handler();                        handler.postDelayed(new Runnable() {                            @SuppressLint("LongLogTag")                            public void run() {                                Log.d("devi963", "run: " + campareImage);                                if (campareImage.equals("new")) {                                    Log.d("TAG", "run: new ");//                                  Toast.makeText(Addcoupon_activity.this, "new", Toast.LENGTH_SHORT).show();                                } else {                                    //create a file to wrtite bitmap data                                    Log.d("filejkeyvalue", "run: " + preferences.get(Addcoupon_activity.this, preferences.KEY_File));                                    if (preferences.get(Addcoupon_activity.this, preferences.KEY_File).equals("")) {                                        Log.d("filejkeyvalue", "run: 2");//                                                        Toast.makeText(Addcoupon_activity.this, "run", Toast.LENGTH_SHORT).show();                                        f = new File(Addcoupon_activity.this.getCacheDir(), "product_img.JPEG");                                        try {                                            f.createNewFile();                                        } catch (IOException e) {                                            e.printStackTrace();                                        }                                        //convert bitmat to byte by byte                                        Bitmap bitmap15 = bt7;                                        Log.d("check_bitmaps 1 ", "run: bitmap " + bitmap15);                                        if (bitmap15 != null) {                                            Log.d("check_bitmaps 2 ", "run: bitmap " + bitmap15);                                            ByteArrayOutputStream bos = new ByteArrayOutputStream();                                            bitmap15.compress(Bitmap.CompressFormat.JPEG, 60, bos);                                            byte[] bitmapdata = bos.toByteArray();                                            //writte the bites in file                                            try {                                                FileOutputStream fos = new FileOutputStream(f);                                                fos.write(bitmapdata);                                                fos.flush();                                                fos.close();                                            } catch (FileNotFoundException e) {                                                Log.d("devi1 FileNotFoundException ", "run: " + e);                                                e.printStackTrace();                                            } catch (IOException e) {                                                e.printStackTrace();                                                Log.d("devi1 FileNotFoundException2 ", "run: " + e);                                            }                                            Log.d("devi1url 3", "onCreate: " + bitmap5);                                            Log.d("devi1url 12", "run: " + f);                                            String edcopanimgs = String.valueOf(f);                                            preferences.save(Addcoupon_activity.this, preferences.KEY_File, String.valueOf(f));                                        } else {                                            Log.d("check_bitmaps 3 ", "run: bitmap null");                                        }//                                       part = createpart(edcopanimgs);//                                       getFileFromBitmap.getFileFromBitmap(bt7,MainActivity.this);                                    } else {                                        Log.d("filejkeyvalue", "run: 1");//                                      Toast.makeText(Addcoupon_activity.this, "wait", Toast.LENGTH_SHORT).show();                                    }                                }                            }                        }, 10000);                    }//                    binding.edtEnterTitle.setText(title);//                    binding.edtEnterProduct.setText(Product);//                    binding.edtEnterShop.setText(brand);//                   binding.txtDeliveryCharge.setText(delivery_cost);                    binding.edtEnterTitle.addTextChangedListener(new TextWatcher() {                        @Override                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {                        }                        @Override                        public void onTextChanged(CharSequence s, int start, int before, int count) {                            String edit_title = binding.edtEnterTitle.getText().toString();                            myedit.putString("title", edit_title);                            myedit.apply();                            binding.edtEnterTitle.setGravity(Gravity.END);                            binding.edtEnterShop.setGravity(Gravity.END);                            binding.edtEnterProduct.setGravity(Gravity.END);                        }                        @Override                        public void afterTextChanged(Editable s) {                        }                    });                    binding.edtEnterShop.addTextChangedListener(new TextWatcher() {                        @Override                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {                        }                        @Override                        public void onTextChanged(CharSequence s, int start, int before, int count) {                            String brand = binding.edtEnterShop.getText().toString();                            myedit.putString("brand", brand);                            myedit.apply();                        }                        @Override                        public void afterTextChanged(Editable s) {                        }                    });                    binding.edtEnterProduct.addTextChangedListener(new TextWatcher() {                        @Override                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {                        }                        @Override                        public void onTextChanged(CharSequence s, int start, int before, int count) {                            String Product = binding.edtEnterProduct.getText().toString();                            myedit.putString("Product", Product);                            myedit.apply();                        }                        @Override                        public void afterTextChanged(Editable s) {                        }                    });                    binding.titel2.setOnFocusChangeListener(new View.OnFocusChangeListener() {                        @Override                        public void onFocusChange(View v, boolean hasFocus) {                            if (hasFocus) {                                binding.edtEnterTitle.requestFocus();                                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                                imm.showSoftInput(binding.edtEnterTitle, InputMethodManager.SHOW_IMPLICIT);//                                        Toast.makeText(Addcoupon_activity.this, "click", Toast.LENGTH_SHORT).show();                                binding.edtEnterTitle.setSelection(binding.edtEnterTitle.getText().length());                            }                        }                    });                    binding.edtEnterTitle.setOnFocusChangeListener(new View.OnFocusChangeListener() {                        @Override                        public void onFocusChange(View v, boolean hasFocus) {                            if (hasFocus) {                                binding.titel2.setVisibility(View.GONE);                                binding.titel1.setVisibility(View.VISIBLE);                                binding.edtEnterTitle.requestFocus();                                binding.edtEnterTitle.setGravity(Gravity.LEFT);                                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                                imm.showSoftInput(binding.edtEnterTitle, InputMethodManager.SHOW_IMPLICIT);                                binding.edtEnterTitle.setSelection(binding.edtEnterTitle.getText().length());                            } else {                                binding.titel2.setVisibility(View.VISIBLE);                                binding.titel1.setVisibility(View.INVISIBLE);                                binding.edtEnterTitle.setVisibility(View.VISIBLE);                                binding.edtEnterTitle.setGravity(Gravity.END);                                checkingg = binding.titel2.getText().toString();                                Log.d("cheninggg", "onFocusChange: 2 " + checkingg);//                        binding.titel2.setText("Copun Titel");                                if (binding.edtEnterTitle.getText().toString().isEmpty()) {                                    binding.titel2.setTextColor(getResources().getColor(R.color.black));                                    binding.titel2.setHintTextColor(getResources().getColor(R.color.black));                                    Log.d("chekhu", "onCreate: true 2");                                } else {                                    binding.titel2.setTextColor(getResources().getColor(R.color.greay));                                    binding.titel2.setHintTextColor(getResources().getColor(R.color.greay));                                    binding.edtEnterTitle.setGravity(Gravity.END);                                    Log.d("chekhu", "onCreate: false 2 ");                                }                            }                        }                    });                    if (!binding.edtEnterTitle.getText().toString().isEmpty()) {                        binding.edtEnterTitle.setGravity(Gravity.END);                    } else {                        binding.edtEnterTitle.setGravity(Gravity.END);                    }                    binding.titel2Shop.setOnFocusChangeListener(new View.OnFocusChangeListener() {                        @Override                        public void onFocusChange(View v, boolean hasFocus) {                            if (hasFocus) {                                binding.edtEnterShop.requestFocus();                                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                                imm.showSoftInput(binding.edtEnterShop, InputMethodManager.SHOW_IMPLICIT);                                binding.edtEnterShop.setSelection(binding.edtEnterShop.getText().length());                            }                        }                    });                    binding.edtEnterShop.setOnFocusChangeListener(new View.OnFocusChangeListener() {                        @SuppressLint("RtlHardcoded")                        @Override                        public void onFocusChange(View v, boolean hasFocus) {                            if (hasFocus) {                                binding.edtEnterShop.setGravity(Gravity.LEFT);                                binding.titel2Shop.setVisibility(View.GONE);                                binding.titel1Shop.setVisibility(View.VISIBLE);                                binding.edtEnterShop.requestFocus();                                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                                imm.showSoftInput(binding.edtEnterShop, InputMethodManager.SHOW_IMPLICIT);                                binding.edtEnterShop.setSelection(binding.edtEnterShop.getText().length());                            } else {                                binding.titel2Shop.setVisibility(View.VISIBLE);                                binding.titel1Shop.setVisibility(View.INVISIBLE);                                binding.edtEnterShop.setVisibility(View.VISIBLE);                                binding.edtEnterShop.setGravity(Gravity.END);                                checkingg = binding.titel2Shop.getText().toString();                                Log.d("cheninggg", "onFocusChange: 2 " + checkingg);//                        binding.titel2.setText("Copun Titel");                                if (binding.edtEnterShop.getText().toString().isEmpty()) {                                    binding.titel2Shop.setTextColor(getResources().getColor(R.color.black));                                    binding.titel2Shop.setHintTextColor(getResources().getColor(R.color.black));                                    Log.d("chekhu", "onCreate: true 2");                                } else {                                    binding.titel2Shop.setTextColor(getResources().getColor(R.color.greay));                                    binding.titel2Shop.setHintTextColor(getResources().getColor(R.color.greay));                                    binding.edtEnterShop.setGravity(Gravity.END);                                    Log.d("chekhu", "onCreate: false 2 ");                                }                            }                        }                    });                    if (!binding.edtEnterShop.getText().toString().isEmpty()) {                        binding.edtEnterShop.setGravity(Gravity.END);                    } else {                        binding.edtEnterShop.setGravity(Gravity.END);                    }                    binding.titel2Product.setOnFocusChangeListener(new View.OnFocusChangeListener() {                        @Override                        public void onFocusChange(View v, boolean hasFocus) {                            if (hasFocus) {                                binding.edtEnterProduct.requestFocus();                                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                                imm.showSoftInput(binding.edtEnterProduct, InputMethodManager.SHOW_IMPLICIT);//                                        Toast.makeText(Addcoupon_activity.this, "click", Toast.LENGTH_SHORT).show();                                binding.edtEnterProduct.setSelection(binding.edtEnterProduct.getText().length());                            }                        }                    });                    binding.edtEnterProduct.setOnFocusChangeListener(new View.OnFocusChangeListener() {                        @SuppressLint("RtlHardcoded")                        @Override                        public void onFocusChange(View v, boolean hasFocus) {                            if (hasFocus) {                                binding.edtEnterProduct.setGravity(Gravity.LEFT);                                binding.titel2Product.setVisibility(View.GONE);                                binding.titel1Product.setVisibility(View.VISIBLE);                                binding.edtEnterProduct.requestFocus();                                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                                imm.showSoftInput(binding.edtEnterProduct, InputMethodManager.SHOW_IMPLICIT);                                binding.edtEnterProduct.setSelection(binding.edtEnterProduct.getText().length());                            } else {                                binding.titel2Product.setVisibility(View.VISIBLE);                                binding.titel1Product.setVisibility(View.INVISIBLE);                                binding.edtEnterProduct.setVisibility(View.VISIBLE);                                binding.edtEnterProduct.setGravity(Gravity.END);                                checkingg = binding.titel2Product.getText().toString();                                Log.d("cheninggg", "onFocusChange: 2 " + checkingg);//                        binding.titel2.setText("Copun Titel");                                if (binding.edtEnterProduct.getText().toString().isEmpty()) {                                    binding.titel2Product.setTextColor(getResources().getColor(R.color.black));                                    binding.titel2Product.setHintTextColor(getResources().getColor(R.color.black));                                    Log.d("chekhu", "onCreate: true 2");                                } else {                                    binding.titel2Product.setTextColor(getResources().getColor(R.color.greay));                                    binding.titel2Product.setHintTextColor(getResources().getColor(R.color.greay));                                    binding.edtEnterProduct.setGravity(Gravity.END);                                    Log.d("chekhu", "onCreate: false 2 ");                                }                            }                        }                    });                    if (!binding.edtEnterProduct.getText().toString().isEmpty()) {                        binding.edtEnterProduct.setGravity(Gravity.END);                    } else {                        binding.edtEnterProduct.setGravity(Gravity.END);                    }                    binding.btnShare.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            Intent get_share = new Intent(Addcoupon_activity.this, Share_activity.class);                            get_share.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            startActivity(get_share);                        }                    });                    binding.btnSave.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            Log.d("key-files", "onClick: " + preferences.get(Addcoupon_activity.this, preferences.KEY_File));                            Log.d("key-files ll ", "onClick: " + preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File));                            if (preferences.get(Addcoupon_activity.this, preferences.KEY_File).equals("") || preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File).equals("")) {                                Toast.makeText(Addcoupon_activity.this, "Please wait a minute", Toast.LENGTH_SHORT).show();                            } else {                                binding.progressbarList.setVisibility(View.VISIBLE);//                                        binding.mainLinear.setVisibility(View.GONE);                                Log.d("devi1url", "onCreate: " + preferences.get(Addcoupon_activity.this, preferences.KEY_File));                                String filesss = preferences.get(Addcoupon_activity.this, preferences.KEY_File);                                SharedPreferences sh = getSharedPreferences("MySharedPref", MODE_PRIVATE);                                //add coupon data                                String title = binding.edtEnterTitle.getText().toString();                                String brand = binding.edtEnterShop.getText().toString();                                String Product = binding.edtEnterProduct.getText().toString();                                String Copon_image = sh.getString("Copon_image", "");                                String budget = sh.getString("budget", "");                                String overall_budget = sh.getString("overall_budget", "");                                String delivery_cost = sh.getString("delivery_cost", "");                                String edt_entermaximumbudget = sh.getString("edt_entermaximumbudget", "");                                String userid = sh.getString("userid", "");                                //deal data                                String deal_dealtype = sh.getString("dealtype", "");                                String deal_currency = sh.getString("currency", "");                                String deal_calculation = sh.getString("calculation", "");                                String deal_share = sh.getString("share", "");                                String deal_use = sh.getString("single", "");                                String deal_Description = sh.getString("description", "");                                String deal_regular_price = sh.getString("regular_price", "");                                String deal_offer_price = sh.getString("offer_price", "");                                String launch_deal_year = sh.getString("launch_deal_year", "");                                String deal_maximumamount = sh.getString("maximum_redumption", "");                                String launch_deal_month = sh.getString("deal_dealtype", "");                                String launch_deal_date = sh.getString("launch_deal_month", "");                                String launch_deal_time = sh.getString("final_launch_time", "");                                String expiry_deal_year = sh.getString("deal_dealtype", "");                                String expiry_deal_month = sh.getString("expiry_deal_year", "");                                String expiry_deal_date = sh.getString("expiry_deal_date", "");                                String expiry_deal_time = sh.getString("final_expiry_time", "");                                String expriree_times = sh.getString("exprirydate", "");                                String launchdate = sh.getString("launchdate", "");                                boolean share1 = Boolean.parseBoolean(null);                                if (deal_share.equals("Yes")) {                                    share1 = true;                                } else if (deal_share.equals("No")) {                                    share1 = false;                                }                                Log.d("share_and_use", "onClick: " + share1);                                boolean Use1 = Boolean.parseBoolean(null);                                if (deal_use.equals("Yes")) {                                    Use1 = true;                                } else if (deal_use.equals("No")) {                                    Use1 = false;                                }                                Log.d("share_and_use", "onClick: " + Use1);                                //target data                                String txt_location_method_target = sh.getString("method", "");                                String txt_time_to_location_type = sh.getString("journeyTime", "");                                String txt_gender_type_target = sh.getString("gender", "");                                String txt_weather_type_target = sh.getString("weather", "");                                String txt_min_age_target = sh.getString("miiin", "");                                String txt_max_age_target = sh.getString("maxxxx", "");                                String txt_min_temp_target = sh.getString("tempmin", "");                                String txt_max_temp_target = sh.getString("tempmax", "");                                String get_units_target = sh.getString("units", "");                                String get_distance = sh.getString("distancenum", "");                                String txt_journey_method_target = sh.getString("journey", "");                                //terms data                                String get_terms = sh.getString("terms", "");                                //location data                                String address1 = sh.getString("address1", "");                                String address2 = sh.getString("address2", "");                                String town_city = sh.getString("town_city", "");                                String postcode = sh.getString("postcode", "");                                String opening_times = sh.getString("opening_times", "");                                String latitude = sh.getString("edit_latitude", "");                                String longitude = sh.getString("edit_longitude", "");                                String country = sh.getString("country", "");                                String expriree_times_time = sh.getString("expriree_times", "");                                String edtDateTimePicker_time = sh.getString("edtDateTimePicker_time", "");                                Log.d("nulllocation", "onClick: " + preferences2.get(Addcoupon_activity.this, preferences2.KEY_Type5));                                if (preferences2.get(Addcoupon_activity.this, preferences2.KEY_Type5).equals("2")) {                                    Log.d("launch_deal_year", "onCreate: " + edtDateTimePicker_time);                                    Log.d("launch_deal_year", "onCreate: " + expriree_times_time);                                    String strex[] = expriree_times_time.split(" ");//                                            Log.d("launch_deal_year", "onCreate: " + strex[0] + " m " + strex[1]);                                    String exdateformate1[] = strex[0].split("/");                                    String exdateformate2[] = strex[1].split(":");                                    finallaunchdateexptiry = exdateformate1[2] + "-" + exdateformate1[1] + "-" + exdateformate1[0] + "T" + exdateformate2[0] + ":" + exdateformate2[1];                                    Log.d("launch_deal_year", "onCreate: n " + finallaunchdate);                                    String str[] = edtDateTimePicker_time.split(" ");//                                            Log.d("launch_deal_year", "onCreate: " + str[0] + " m " + str[1]);                                    String dattefor[] = str[0].split("/");                                    String dattefor2[] = str[1].split(":");                                    finallaunchdate = dattefor[2] + "-" + dattefor[1] + "-" + dattefor[0] + "T" + dattefor2[0] + ":" + dattefor2[1];                                    Log.d("launch_deal_year", "onCreate: n " + finallaunchdate + finallaunchdateexptiry);                                } else {                                    finallaunchdate = sh.getString("launchdate_edit", "");                                    finallaunchdateexptiry = sh.getString("exprirydate_edit", "");                                    Log.d("111111111", "onClick: " + finallaunchdate);                                }                                Log.d("editdata", "onCreate: " + deal_dealtype + " " + deal_currency + " " + deal_calculation + " " + deal_share + " " + deal_use + " " + deal_Description + " " + deal_regular_price + " " + " " + deal_offer_price + " " + launch_deal_year + " " + launch_deal_month + " " + launch_deal_date + " " + launch_deal_time + " " + expiry_deal_year + " " + expiry_deal_month + " " + expiry_deal_date + " " + deal_maximumamount + " " + expiry_deal_time + " " + expriree_times + " " + launchdate);                                Log.d("editdata", "onCreate: " + txt_location_method_target + " " + txt_time_to_location_type + " " + txt_gender_type_target + " " + txt_weather_type_target + " " + txt_min_age_target + " " + txt_max_age_target + " " + txt_min_temp_target + " " + txt_max_temp_target + " " + get_units_target + " " + get_distance);                                Log.d("editdata", "onCreate: " + address1 + " " + address2 + " " + town_city + " " + postcode + " " + opening_times + " " + latitude + " " + longitude + " " + country);                                Log.d("editdata", "onCreate: " + get_terms);                                String dsw = preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File);                                last_image_location[0] = dsw;                                part = createpart(filesss);                                part2 = createpart2(last_image_location[0]);                                boolean status = sh.getBoolean("status", true);                                Log.d("status123", "onClick: " + status);                                Log.d("get_distance", "onClick: " + get_distance);                                String marketing_Group = sh.getString("marketGropuArray", "");                                String messageGropuArray = sh.getString("messageGropuArray", "");                                String market_group = marketing_Group.substring(1, marketing_Group.length() - 1);                                String message_group = messageGropuArray.substring(1, messageGropuArray.length() - 1);                                Log.d("message_group123", "onClick: " + market_group + " " + message_group);                                EditData2(title, brand, brand, Product, Product, deal_dealtype, deal_currency, finallaunchdate, "10:30", finallaunchdateexptiry, "10:40", share1, Use1, Integer.valueOf(deal_maximumamount), address1, address2, town_city, town_city, postcode, opening_times, message_group, get_distance, txt_journey_method_target, Integer.valueOf(txt_min_age_target), Integer.valueOf(txt_max_age_target), txt_gender_type_target, Integer.valueOf(txt_max_temp_target), Integer.valueOf(txt_min_temp_target), Integer.valueOf(overall_budget), get_units_target, 0, txt_location_method_target, get_units_target, get_terms, txt_weather_type_target, txt_time_to_location_type, deal_calculation, Integer.valueOf(overall_budget), Integer.valueOf(edt_entermaximumbudget), country, userid, deal_Description, market_group, Integer.valueOf(deal_regular_price), Integer.valueOf(deal_offer_price), status, Integer.valueOf(overall_budget), 0.02f, longitude, latitude);                            }                        }                    });                    binding.btnNext.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            boolean payment_success = sh.getBoolean("payment_success", true);                            String title = sh.getString("title", "");                            String budget = sh.getString("budget", "");                            float budget1 = Float.parseFloat(budget);                            String userid = sh.getString("userid", "");                            String coupon_id = sh.getString("coupon_id", "");                            Log.d("coupon_details:", "onClick: " + "title :- " + title + " budget :- " + budget + " user_id :- " + userid + " coupon_id :- " + coupon_id);                            Log.d("payment_success", "onClick: " + payment_success);                            if (payment_success) {//                                        Toast.makeText(Addcoupon_activity.this, "Payment done ", Toast.LENGTH_SHORT).show();                            } else {//                                        Toast.makeText(Addcoupon_activity.this, "Payment remaining", Toast.LENGTH_SHORT).show();                                myedit.putString("pay_uid", userid);                                myedit.putString("pay_getid", coupon_id);                                myedit.putString("pay_titel", title);                                myedit.putFloat("pay_budget", budget1);                                myedit.apply();                                add_payment();                            }                        }                    });                    binding.lloutDeal.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            String coupon_title = binding.edtEnterTitle.getText().toString();                            String brand = binding.edtEnterShop.getText().toString();                            String product = binding.edtEnterProduct.getText().toString();                            Log.d("devi3", "onClick: " + coupon_title + " " + brand + " " + product);                            preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                            preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                            preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                                    String delevery = binding.txtDeliveryCharge.getText().toString();//                                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                            Intent get_deal = new Intent(Addcoupon_activity.this, Coupon_deal_activity.class);                            get_deal.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            get_deal.putExtra("type", "2");                            startActivity(get_deal);                        }                    });                    binding.cardPreview.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            String coupon_id = sh.getString("coupon_id", "");                            SharedPreferences pref = getSharedPreferences("MySharedPref", Context.MODE_PRIVATE);                            SharedPreferences.Editor myedit = pref.edit();                            myedit.putString("id", coupon_id);//                                    myEdit.putString("currency", currency);//                                    myEdit.putString("terms_date", terms_date);                            myedit.apply();                            Intent get_details = new Intent(Addcoupon_activity.this, Coupon_details.class);                            get_details.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            startActivity(get_details);                        }                    });                    binding.lloutLocation.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            String coupon_title = binding.edtEnterTitle.getText().toString();                            String brand = binding.edtEnterShop.getText().toString();                            String product = binding.edtEnterProduct.getText().toString();                            preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                            preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                            preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                                    String delevery = binding.txtDeliveryCharge.getText().toString();//                                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                            Intent get_location = new Intent(Addcoupon_activity.this, location_activity.class);                            get_location.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            get_location.putExtra("type", "2");                            startActivity(get_location);                        }                    });//done                    binding.lloutTarget.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            String coupon_title = binding.edtEnterTitle.getText().toString();                            String brand = binding.edtEnterShop.getText().toString();                            String product = binding.edtEnterProduct.getText().toString();                            preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                            preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                            preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                                    String delevery = binding.txtDeliveryCharge.getText().toString();//                                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                            Intent get_target = new Intent(Addcoupon_activity.this, Target_activity.class);                            get_target.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            get_target.putExtra("type", "2");                            get_target.putExtra("type2", "20");                            startActivity(get_target);                        }                    });//done                    binding.llouttearms.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            String coupon_title = binding.edtEnterTitle.getText().toString();                            String brand = binding.edtEnterShop.getText().toString();                            String product = binding.edtEnterProduct.getText().toString();                            preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(coupon_title));                            preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(brand));                            preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(product));//                                    String delevery = binding.txtDeliveryCharge.getText().toString();//                                    preferences.save(Addcoupon_activity.this, preferences.Key_delevary, String.valueOf(delevery));                            Intent get_terms2 = new Intent(Addcoupon_activity.this, Terms_activity.class);                            get_terms2.putExtra("type", "2");                            get_terms2.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            startActivity(get_terms2);                        }                    });                    binding.cardPreviewButton.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            Intent get_preview = new Intent(Addcoupon_activity.this, Coupon_details.class);                            get_preview.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            get_preview.putExtra("type", "2");                            startActivity(get_preview);                        }                    });                    binding.imgBackCurrency.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {//                                    Intent get_main = new Intent(Addcoupon_activity.this, MainActivity.class);//                                    get_main.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);//                                    startActivity(get_main);//                                    finish();                            onBackPressed();                        }                    });                    binding.lloutImgFromUser.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if (Build.VERSION.SDK_INT >= 23) {                                if (checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {                                    selectImage();                                } else {                                    ActivityCompat.requestPermissions(Addcoupon_activity.this, new String[]{Manifest.permission.CAMERA}, 1);                                    if (checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {                                        image_code = "edit";//                                Intent intent = new Intent(Addcoupon_activity.this, Image_set_Activity.class);//                                startActivity(intent);                                        selectImage();                                    }                                }                            }                        }                    });                }            }, 2000);        }        else if (getIntent().getStringExtra("type").equalsIgnoreCase("3")) {            mapping = "2";            SharedPreferences pref = getSharedPreferences("MySharedPref", Context.MODE_PRIVATE);            SharedPreferences.Editor myedit = pref.edit();            SharedPreferences sh = getSharedPreferences("MySharedPref", MODE_PRIVATE);            String ids1 = sh.getString("ids12", "");            binding.lloutAdd.setVisibility(View.GONE);            binding.lloutEdit.setVisibility(View.VISIBLE);            binding.lloutSharedCoupon.setVisibility(View.VISIBLE);            binding.txtDealDiscount.setTextColor(Color.BLACK);            binding.txtLocationMap.setTextColor(Color.BLACK);            binding.txtTargetSet.setTextColor(Color.BLACK);            String title = sh.getString("title", "");            boolean status = sh.getBoolean("status", true);            if (status) {                binding.btnPay.setVisibility(View.GONE);                binding.btnPause.setVisibility(View.VISIBLE);            } else {                binding.btnPause.setVisibility(View.GONE);                binding.btnPay.setVisibility(View.VISIBLE);            }            binding.edtEnterProduct.setGravity(Gravity.END);            binding.edtEnterTitle.setGravity(Gravity.END);            binding.edtEnterShop.setGravity(Gravity.END);            String brand = sh.getString("brand", "");            String Product = sh.getString("Product", "");            String town_city = sh.getString("town_city", "");            String country = sh.getString("country", "");            String deal = sh.getString("deal", "");            String location_mthod = sh.getString("location_mthod", "");            binding.txtDealDiscount.setText(deal);            binding.txtLocationMap.setText(town_city + ", " + country);            binding.txtTargetSet.setText(location_mthod);            binding.edtEnterTitle.setText(title);            binding.edtEnterProduct.setText(Product);            binding.edtEnterShop.setText(brand);            if (getIntent().getStringExtra("type2").equalsIgnoreCase("20")) {                binding.progressbarList.setVisibility(View.VISIBLE);                id_vise_coupon_data(ids1);            }            Handler handler = new Handler();            handler.postDelayed(new Runnable() {                @SuppressLint({"LongLogTag", "SetTextI18n"})                public void run() {                    String Copon_image = sh.getString("Copon_image", "");                    String budget = sh.getString("budget", "");                    String overall_budget = sh.getString("overall_budget", "");                    String set_target = sh.getString("method", "");                    String delivery_cost = sh.getString("delivery_cost", "");                    String location_image = sh.getString("location_image", "");//                            String currency_symbol = sh.getString("currency_symbol", "");                    final String[] last_image_location = {preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File)};                    Log.d("filejkeyvaluelocation 1", "run: " + location_image);                    String image1 = location_image;                    URL url3 = null;                    try {                        url3 = new URL(image1);                    } catch (MalformedURLException e) {                        e.printStackTrace();                    }                    if (!last_image_location[0].isEmpty()) {                    } else {                        if (url3 == null) {//                          Toast.makeText(Addcoupon_activity.this, "n2", Toast.LENGTH_SHORT).show();                        } else {                            new GetImageFromUrl3().execute(String.valueOf(url3));                            Handler handler = new Handler();                            handler.postDelayed(new Runnable() {                                @SuppressLint("LongLogTag")                                public void run() {                                    //create a file to wrtite bitmap data                                    Log.d("filejkeyvaluelocation", "run: " + preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File));                                    if (preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File).equals("")) {                                        Log.d("filejkeyvaluelocation", "run: 2");//                                        Toast.makeText(location_activity.this, "run", Toast.LENGTH_SHORT).show();                                        File l = new File(Addcoupon_activity.this.getCacheDir(), "location_img.JPEG");                                        try {                                            l.createNewFile();                                        } catch (IOException e) {                                            e.printStackTrace();                                        }                                        Bitmap bitmap15 = bt8;                                        if (bitmap15 != null) {                                            //convert bitmat to byte by byte                                            ByteArrayOutputStream bos = new ByteArrayOutputStream();                                            bitmap15.compress(Bitmap.CompressFormat.JPEG, 60, bos);                                            byte[] bitmapdata = bos.toByteArray();                                            //writte the bites in file                                            try {                                                FileOutputStream fos = new FileOutputStream(l);                                                fos.write(bitmapdata);                                                fos.flush();                                                fos.close();                                            } catch (FileNotFoundException e) {                                                Log.d("devi1location FileNotFoundException ", "run: " + e);                                                e.printStackTrace();                                            } catch (IOException e) {                                                e.printStackTrace();                                                Log.d("devi1location FileNotFoundException2 ", "run: " + e);                                            }                                            Log.d("devi1urllocation 12", "run: " + l);                                            preferences.save(Addcoupon_activity.this, preferences.KEY_Location_File, String.valueOf(l));                                        } else {                                            Log.d("check_bitmap 5", "run: location");                                        }                                    } else {                                        Log.d("filejkeyvaluelocation", "run: 1");//                                        Toast.makeText(location_activity.this, "wait", Toast.LENGTH_SHORT).show();                                    }                                }                            }, 10000);                        }                    }                    //For Coupan Image                    Log.d("devi_url_img", "onCreate: Coupan img URL in API -> " + Copon_image);                    URL url = null;                    try {                        url = new URL(Copon_image);                        Log.d("devi_url_img", "onCreate: Coupan img URL in API -> " + url);                    } catch (MalformedURLException e) {                        Log.d("devi_url_img e ", "onCreate: Error -> " + e);                    }                    Log.d("devi_url_img", "onCreate: " + url);                    campareImage = sh.getString("campareImage_value", "no");                    Log.d("devi_new_img ?", "run: " + campareImage);                    if (campareImage.equals("no")) {                        new GetImageFromUrl().execute(String.valueOf(url));                    }                    if (url == null) {                        Log.d("coupan_img_edit ", "run: no image link for coupan image in edit API");                    } else {                        Handler handler = new Handler();                        handler.postDelayed(new Runnable() {                            @SuppressLint("LongLogTag")                            public void run() {                                Log.d("devi_new_img ?", "run: cheack new couopn img select or not -> " + campareImage);                                // if new  coupan image selected so go in if condition                                if (campareImage.equals("new")) {                                    Log.d("coupan_img_edit", "run: new coupan image selected  ");                                } else {//                                                  No select new image                                    //create a file to wrtite bitmap data                                    Log.d("coupan_img_edit ?", "run: check file is empy or not -> " + preferences.get(Addcoupon_activity.this, preferences.KEY_File));                                    if (preferences.get(Addcoupon_activity.this, preferences.KEY_File).equals("")) {                                        Log.d("coupan_img_edit", "run: no select new coupan image");//                                                        Toast.makeText(Addcoupon_activity.this, "run", Toast.LENGTH_SHORT).show();                                        f = new File(Addcoupon_activity.this.getCacheDir(), "product_img.JPEG");                                        try {                                            f.createNewFile();                                        } catch (IOException e) {                                            e.printStackTrace();                                        }                                        //convert bitmat to byte by byte                                        Bitmap bitmap15 = bt7;                                        if (bitmap15 != null) {                                            ByteArrayOutputStream bos = new ByteArrayOutputStream();                                            bitmap15.compress(Bitmap.CompressFormat.JPEG, 60, bos);                                            byte[] bitmapdata = bos.toByteArray();                                            //writte the bites in file                                            try {                                                FileOutputStream fos = new FileOutputStream(f);                                                fos.write(bitmapdata);                                                fos.flush();                                                fos.close();                                            } catch (FileNotFoundException e) {                                                Log.d("devi1 FileNotFoundException ", "run: error ->  " + e);                                                e.printStackTrace();                                            } catch (IOException e) {                                                e.printStackTrace();                                                Log.d("devi1 FileNotFoundException2 ", "run: error -> " + e);                                            }                                            Log.d("devi1url 3", "onCreate: check bitmap ->  " + bitmap5);                                            Log.d("devi1url 12", "run: check file -> " + f);                                            String edcopanimgs = String.valueOf(f);                                            preferences.save(Addcoupon_activity.this, preferences.KEY_File, String.valueOf(f));                                        } else {                                            Log.d("bitmap_check 4", "run: image null");                                        }                                    } else {                                        Log.d("coupan_img_edit", "run: select new coupan image");                                    }                                }                            }                        }, 10000);                    }//                            Toast.makeText(Addcoupon_activity.this, "" + title, Toast.LENGTH_SHORT).show();                    //shared coupon name                    String shared_name = sh.getString("shared_name", "");                    binding.txtUserName.setText(shared_name);                    binding.nameLetter.setText(String.valueOf(shared_name.toUpperCase(Locale.ROOT).charAt(0)));                    //linear visibility                    binding.cardPreviewButton.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            String coupon_id = sh.getString("coupon_id", "");                            SharedPreferences pref = getSharedPreferences("MySharedPref", Context.MODE_PRIVATE);                            SharedPreferences.Editor myedit = pref.edit();                            myedit.putString("id", coupon_id);//                                    myEdit.putString("currency", currency);//                                    myEdit.putString("terms_date", terms_date);                            myedit.apply();                            Intent get_details = new Intent(Addcoupon_activity.this, Coupon_details.class);                            get_details.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            startActivity(get_details);                        }                    });                    String title12 = preferences.get(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE);                    String brand12 = preferences.get(Addcoupon_activity.this, preferences.KEY_BRAND_NAME);                    String product12 = preferences.get(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME);                    binding.txtDeliveryCharge.setTextColor(Color.BLACK);                    binding.txtDollarSign.setTextColor(Color.BLACK);                    binding.txtUSD.setTextColor(Color.BLACK);                    //buttons                    binding.btnPlayPause.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder();                            HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();                            loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);                            clientBuilder.addInterceptor(loggingInterceptor);                            Retrofit retrofit = new Retrofit.Builder().baseUrl("http://54.90.77.44:8000/coupon/").addConverterFactory(ScalarsConverterFactory.create()).addConverterFactory(GsonConverterFactory.create()).build();                            ApiInterface apiInterface = retrofit.create(ApiInterface.class);                            try {                                JSONObject paramObject = new JSONObject();                                paramObject.put("id", ids1);                                Log.d("run_id1", "onCreate:1 " + paramObject);                                Call<PlayPause> userCall = apiInterface.get_play_pause_status(String.valueOf(paramObject));                                userCall.enqueue(new Callback<PlayPause>() {                                    @Override                                    public void onResponse(Call<PlayPause> call, Response<PlayPause> response) {                                        Log.d("viru_qrcode", "onResponse: " + response.raw());                                        Log.d("viru_qrcode", "onResponse: " + response.message());                                        if (response.body().getSuccess()) {//                                    Toast.makeText(Addcoupon_activity.this, "" + response.body().getMessage(), Toast.LENGTH_SHORT).show();//                                    Log.d("devi98", "onResponse: "+response.body().getData().getDealType());                                            boolean status = sh.getBoolean("status", true);//                                    Toast.makeText(Addcoupon_activity.this, "2" + status, Toast.LENGTH_SHORT).show();                                            Log.d("idsssss", "onResponse: " + response.body().getData().getId());                                            if (status) {                                                binding.btnPause.setVisibility(View.GONE);                                                binding.btnPay.setVisibility(View.VISIBLE);                                                boolean play_pause_status = response.body().getData().getPlayPauseStatus();                                                myedit.putBoolean("status", play_pause_status);                                                myedit.apply();                                            } else {                                                binding.btnPay.setVisibility(View.GONE);                                                binding.btnPause.setVisibility(View.VISIBLE);                                                boolean play_pause_status = response.body().getData().getPlayPauseStatus();                                                myedit.putBoolean("status", play_pause_status);                                                myedit.apply();                                            }                                        } else {                                            Toast.makeText(Addcoupon_activity.this, "" + response.body().getMessage(), Toast.LENGTH_LONG).show();                                        }                                    }                                    @Override                                    public void onFailure(Call<PlayPause> call, Throwable t) {                                        Log.d("error_failure", "onFailure: " + "an error occurred" + " " + t);                                    }                                });                            } catch (JSONException e) {                                e.printStackTrace();                            }                        }                    });                    binding.btnSaveEdit.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {//                                    Toast.makeText(Addcoupon_activity.this, "swswsws", Toast.LENGTH_SHORT).show();                            Log.d("key-files", "onClick: " + preferences.get(Addcoupon_activity.this, preferences.KEY_File));                            Log.d("key-files ll ", "onClick: " + preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File));                            if (preferences.get(Addcoupon_activity.this, preferences.KEY_File).equals("") || preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File).equals("")) {                                Toast.makeText(Addcoupon_activity.this, "Please wait a minute", Toast.LENGTH_SHORT).show();                            } else {                                binding.progressbarList.setVisibility(View.VISIBLE);//                                        binding.mainLinear.setVisibility(View.GONE);                                String finalimage = preferences.get(Addcoupon_activity.this, preferences.KEY_PRODUCT_Image);                                Log.d("devi1url", "onCreate: " + preferences.get(Addcoupon_activity.this, preferences.KEY_File));                                String filesss = preferences.get(Addcoupon_activity.this, preferences.KEY_File);                                SharedPreferences sh = getSharedPreferences("MySharedPref", MODE_PRIVATE);                                //add coupon data                                String title = binding.edtEnterTitle.getText().toString();                                String brand = binding.edtEnterShop.getText().toString();                                String Product = binding.edtEnterProduct.getText().toString();                                String Copon_image = sh.getString("Copon_image", "");                                String budget = sh.getString("budget", "");                                String overall_budget = sh.getString("overall_budget", "");                                String delivery_cost = sh.getString("delivery_cost", "");                                String edt_entermaximumbudget = sh.getString("edt_entermaximumbudget", "");                                String userid = sh.getString("userid", "");                                //deal data                                String deal_dealtype = sh.getString("dealtype", "");                                String deal_currency = sh.getString("currency", "");                                String deal_calculation = sh.getString("calculation", "");                                String deal_share = sh.getString("share", "");                                String deal_use = sh.getString("use", "");                                String deal_Description = sh.getString("description", "");                                String deal_regular_price = sh.getString("regular_price", "");                                String deal_offer_price = sh.getString("offer_price", "");                                String launch_deal_year = sh.getString("launch_deal_year", "");                                String deal_maximumamount = sh.getString("maximum_redumption", "");                                String launch_deal_month = sh.getString("deal_dealtype", "");                                String launch_deal_date = sh.getString("launch_deal_month", "");                                String launch_deal_time = sh.getString("final_launch_time", "");                                String expiry_deal_year = sh.getString("deal_dealtype", "");                                String expiry_deal_month = sh.getString("expiry_deal_year", "");                                String expiry_deal_date = sh.getString("expiry_deal_date", "");                                String expiry_deal_time = sh.getString("final_expiry_time", "");                                String expriree_times = sh.getString("exprirydate", "");                                String launchdate = sh.getString("launchdate", "");                                boolean share1 = Boolean.parseBoolean(null);                                if (deal_share.equals("Yes")) {                                    share1 = true;                                } else if (deal_share.equals("No")) {                                    share1 = false;                                }                                Log.d("share_and_use", "onClick: " + share1);/* knw sajget ready dor this always  and this is nmy biooogy and aolse we need to android adeveloper and hybsisis jw2ijnever use the used fu */                                boolean Use1 = Boolean.parseBoolean(null);                                if (deal_use.equals("Yes")) {                                    Use1 = true;                                } else if (deal_use.equals("No")) {                                    Use1 = false;                                }                                Log.d("share_and_use", "onClick: " + Use1);                                //target data                                String txt_location_method_target = sh.getString("method", "");                                String txt_time_to_location_type = sh.getString("journeyTime", "");                                String txt_gender_type_target = sh.getString("gender", "");                                String txt_weather_type_target = sh.getString("weather", "");                                String txt_min_age_target = sh.getString("miiin", "");                                String txt_max_age_target = sh.getString("maxxxx", "");                                String txt_min_temp_target = sh.getString("tempmin", "");                                String txt_max_temp_target = sh.getString("tempmax", "");                                String get_units_target = sh.getString("units", "");                                String get_distance = sh.getString("distancenum", "");                                String txt_journey_method_target = sh.getString("journey", "");                                //terms data                                String get_terms = sh.getString("terms", "");                                //location data                                String address1 = sh.getString("address1", "");                                String address2 = sh.getString("address2", "");                                String town_city = sh.getString("town_city", "");                                String postcode = sh.getString("postcode", "");                                String opening_times = sh.getString("opening_times", "");                                String latitude = sh.getString("edit_latitude", "");                                String longitude = sh.getString("edit_longitude", "");                                String country = sh.getString("country", "");                                String expriree_times_time = sh.getString("expriree_times", "");                                String edtDateTimePicker_time = sh.getString("edtDateTimePicker_time", "");                                Log.d("nulllocation", "onClick: " + preferences2.get(Addcoupon_activity.this, preferences2.KEY_Type5));                                if (preferences2.get(Addcoupon_activity.this, preferences2.KEY_Type5).equals("2")) {                                    Log.d("launch_deal_year", "onCreate: " + edtDateTimePicker_time);                                    Log.d("launch_deal_year", "onCreate: " + expriree_times_time);                                    String strex[] = expriree_times_time.split(" ");                                    Log.d("launch_deal_year", "onCreate: " + strex[0] + " m " + strex[1]);                                    String exdateformate1[] = strex[0].split("/");                                    String exdateformate2[] = strex[1].split(":");                                    finallaunchdateexptiry = exdateformate1[2] + "-" + exdateformate1[1] + "-" + exdateformate1[0] + "T" + exdateformate2[0] + ":" + exdateformate2[1];                                    Log.d("launch_deal_year", "onCreate: n " + finallaunchdate);                                    String str[] = edtDateTimePicker_time.split(" ");//                                            Log.d("launch_deal_year", "onCreate: " + str[0] + " m " + str[1]);                                    String dattefor[] = str[0].split("/");                                    String dattefor2[] = str[1].split(":");                                    finallaunchdate = dattefor[2] + "-" + dattefor[1] + "-" + dattefor[0] + "T" + dattefor2[0] + ":" + dattefor2[1];                                    Log.d("launch_deal_year", "onCreate: n " + finallaunchdate + finallaunchdateexptiry);                                } else {                                    finallaunchdate = sh.getString("launchdate_edit", "");                                    finallaunchdateexptiry = sh.getString("exprirydate_edit", "");                                    Log.d("launch_deal_year123", "onClick: " + finallaunchdate);                                }                                Log.d("editdata", "onCreate: " + deal_dealtype + " " + deal_currency + " " + deal_calculation + " " + deal_share + " " + deal_use + " " + deal_Description + " " + deal_regular_price + " " + " " + deal_offer_price + " " + launch_deal_year + " " + launch_deal_month + " " + launch_deal_date + " " + launch_deal_time + " " + expiry_deal_year + " " + expiry_deal_month + " " + expiry_deal_date + " " + deal_maximumamount + " " + expiry_deal_time + " " + expriree_times + " " + launchdate);                                Log.d("editdata", "onCreate: " + txt_location_method_target + " " + txt_time_to_location_type + " " + txt_gender_type_target + " " + txt_weather_type_target + " " + txt_min_age_target + " " + txt_max_age_target + " " + txt_min_temp_target + " " + txt_max_temp_target + " " + get_units_target + " " + get_distance);                                Log.d("editdata", "onCreate: " + address1 + " " + address2 + " " + town_city + " " + postcode + " " + opening_times + " " + latitude + " " + longitude + " " + country);                                Log.d("editdata", "onCreate: " + get_terms);                                final String[] last_image_location = {preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File)};                                String dsw = preferences.get(Addcoupon_activity.this, preferences.KEY_Location_File);                                last_image_location[0] = dsw;                                part = createpart(filesss);                                part2 = createpart2(last_image_location[0]);                                boolean status = sh.getBoolean("status", true);                                Log.d("status123", "onClick: " + status);                                Log.d("get_distance", "onClick: " + get_distance);                                String marketing_Group = sh.getString("marketGropuArray", "");                                String messageGropuArray = sh.getString("messageGropuArray", "");                                String market_group = marketing_Group.substring(1, marketing_Group.length() - 1);                                String message_group = messageGropuArray.substring(1, messageGropuArray.length() - 1);                                Log.d("message_group123", "onClick: " + market_group + " " + message_group);                                EditData2(title, brand, brand, Product, Product, deal_dealtype, deal_currency, finallaunchdate, "10:30", finallaunchdateexptiry, "10:40", share1, Use1, Integer.valueOf(deal_maximumamount), address1, address2, town_city, town_city, postcode, opening_times, message_group, get_distance, txt_journey_method_target, Integer.valueOf(txt_min_age_target), Integer.valueOf(txt_max_age_target), txt_gender_type_target, Integer.valueOf(txt_max_temp_target), Integer.valueOf(txt_min_temp_target), Integer.valueOf(overall_budget), get_units_target, 0, txt_location_method_target, get_units_target, get_terms, txt_weather_type_target, txt_time_to_location_type, deal_calculation, Integer.valueOf(overall_budget), Integer.valueOf(edt_entermaximumbudget), country, userid, deal_Description, market_group, Integer.valueOf(deal_regular_price), Integer.valueOf(deal_offer_price), status, Integer.valueOf(overall_budget), 0.02f, longitude, latitude);                            }                        }                    });                    binding.imgBackCurrency.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            onBackPressed();                        }                    });                    binding.lloutLocation.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            Intent get_location = new Intent(Addcoupon_activity.this, location_activity.class);                            get_location.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            get_location.putExtra("type", "3");                            startActivity(get_location);                        }                    });                }            }, 2000);            binding.edtEnterTitle.setFocusable(false);            binding.edtEnterShop.setFocusable(false);            binding.edtEnterProduct.setFocusable(false);            binding.titel2.setEnabled(false);            binding.titel2Shop.setEnabled(false);            binding.titel2Product.setEnabled(false);        }    }    private void postdata(String couponTitle, String brand, String shop, String product, String service, String dealType, String currency, String launchDate, String launchTime, String expiryDate, String expiryTime, Boolean shared, Boolean singleUse, Integer maximumRedemptions, String address1, String address2, String town, String city, String postcode, String openingTimes, String messageGroup, String distance, String journeyType, Integer ageMin, Integer ageMax, String gender, Integer overTemperature, Integer underTemperature, Integer projectBudget, String distanceUnits, Integer distancenum, String locationType, String geofenceUnit, String terms, String weather, String timeToLocation, String showCalculations, Integer overallBudget, Integer maximumDailybudget, String country, String userId, String description, String marketingGroup, MultipartBody.Part couponImage, Integer normalPrice, Integer offerPrice, Boolean playPauseStatus, Float budget, MultipartBody.Part addressImage, Float deliveryCost, String longitude, String latitude, String txt_location_method10, String txt_journey_method10, String txt_time_to_location_type10, String get_units10, String geofanceDistence10) {        ApiInterface apiInterface = RetrofitClient.getClient().create(ApiInterface.class);        RequestBody couponTitle1 = RequestBody.create(MediaType.parse("multipart/form-data"), couponTitle);        RequestBody brand1 = RequestBody.create(MediaType.parse("multipart/form-data"), brand);        RequestBody shop1 = RequestBody.create(MediaType.parse("multipart/form-data"), shop);        RequestBody product1 = RequestBody.create(MediaType.parse("multipart/form-data"), product);        RequestBody service1 = RequestBody.create(MediaType.parse("multipart/form-data"), service);        RequestBody dealType1 = RequestBody.create(MediaType.parse("multipart/form-data"), dealType);//        RequestBody offerText1 = RequestBody.create(MediaType.parse("multipart/form-data"), offerText);//        RequestBody percentageDiscount1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(percentageDiscount));        RequestBody currency1 = RequestBody.create(MediaType.parse("multipart/form-data"), currency);//        RequestBody priceSaving1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(priceSaving));//        RequestBody percentageSaving1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(percentageSaving));//        RequestBody longProd1 = RequestBody.create(MediaType.parse("multipart/form-data"), longProd);//        RequestBody serText1 = RequestBody.create(MediaType.parse("multipart/form-data"), serText);        RequestBody launchDate1 = RequestBody.create(MediaType.parse("multipart/form-data"), launchDate);        RequestBody launchTime1 = RequestBody.create(MediaType.parse("multipart/form-data"), launchTime);        RequestBody expiryDate1 = RequestBody.create(MediaType.parse("multipart/form-data"), expiryDate);        RequestBody expiryTime1 = RequestBody.create(MediaType.parse("multipart/form-data"), expiryTime);        RequestBody shared1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(shared));        RequestBody singleUse1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(singleUse));        RequestBody maximumRedemptions1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(maximumRedemptions));        RequestBody address11 = RequestBody.create(MediaType.parse("multipart/form-data"), address1);        RequestBody address21 = RequestBody.create(MediaType.parse("multipart/form-data"), address2);        RequestBody town1 = RequestBody.create(MediaType.parse("multipart/form-data"), town);        RequestBody city1 = RequestBody.create(MediaType.parse("multipart/form-data"), city);        RequestBody postcode1 = RequestBody.create(MediaType.parse("multipart/form-data"), postcode);        RequestBody openingTimes1 = RequestBody.create(MediaType.parse("multipart/form-data"), openingTimes);//        RequestBody message1 = RequestBody.create(MediaType.parse("multipart/form-data"), message);//        RequestBody market1 = RequestBody.create(MediaType.parse("multipart/form-data"), market);//        RequestBody profile1 = RequestBody.create(MediaType.parse("multipart/form-data"), profile);        RequestBody messageGroup1 = RequestBody.create(MediaType.parse("multipart/form-data"), messageGroup);        RequestBody distance1 = RequestBody.create(MediaType.parse("multipart/form-data"), distance);        RequestBody journeyType1 = RequestBody.create(MediaType.parse("multipart/form-data"), journeyType);//        RequestBody journeyTime1 = RequestBody.create(MediaType.parse("multipart/form-data"), journeyTime);        RequestBody ageMin1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(ageMin));        RequestBody ageMax1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(ageMax));        RequestBody gender1 = RequestBody.create(MediaType.parse("multipart/form-data"), gender);        RequestBody overTemperature1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(overTemperature));        RequestBody underTemperature1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(underTemperature));        RequestBody projectBudget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(projectBudget));//        RequestBody projectCurrency1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(projectCurrency));//        RequestBody dailyBudget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(dailyBudget));//        RequestBody playPauseStatus1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(playPauseStatus));//        RequestBody mapPin1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(mapPin));//        RequestBody journey1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(journey));        RequestBody distanceUnits1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(distanceUnits));        RequestBody distancenum1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(distancenum));        RequestBody locationType1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(locationType));//        RequestBody journeyTyep1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(journeyTyep));        RequestBody geofenceUnit1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(geofenceUnit));        RequestBody terms1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(terms));        RequestBody weather1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(weather));        RequestBody timeToLocation1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(timeToLocation));//        RequestBody budget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(budget));//        RequestBody deliveryCost1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(deliveryCost));//        RequestBody deal1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(deal));        RequestBody showCalculations1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(showCalculations));        RequestBody overallBudget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(overallBudget));        RequestBody maximumDailybudget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(maximumDailybudget));        RequestBody country1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(country));        RequestBody userId1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(userId));        RequestBody description1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(description));        RequestBody lastgroup1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(marketingGroup));//        RequestBody lastlolcation21 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(location));        RequestBody normalPrice1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(normalPrice));        RequestBody offerPrice1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(offerPrice));        RequestBody playPauseStatus1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(playPauseStatus));        RequestBody budget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(budget));        RequestBody deliveryCost1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(deliveryCost));        RequestBody longitude1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(longitude));        RequestBody latitude1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(latitude));        RequestBody txt_location_method102 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(txt_location_method10));        RequestBody txt_journey_method102 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(txt_journey_method10));        RequestBody txt_time_to_location_type102 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(txt_time_to_location_type10));        RequestBody get_units102 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(get_units10));        RequestBody geofanceDistence102 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(geofanceDistence10));        SharedPreferences sh = getSharedPreferences("MySharedPref", MODE_PRIVATE);        String update_date = sh.getString("terms_update", "");        Log.d("update_date", "postdata: " + update_date);        RequestBody update_date1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(update_date));        Call<AddCoupan> call = apiInterface.add_coupon(couponTitle1, brand1, shop1, product1, service1, dealType1, currency1, launchDate1, launchTime1, expiryDate1, expiryTime1, shared1, singleUse1, maximumRedemptions1, address11, address21, town1, city1, postcode1, openingTimes1, messageGroup1, ageMin1, ageMax1, gender1, overTemperature1, underTemperature1, projectBudget1, terms1, weather1, showCalculations1, overallBudget1, maximumDailybudget1, country1, userId1, description1, lastgroup1, part, normalPrice1, offerPrice1, playPauseStatus1, budget1, part2, deliveryCost1, longitude1, latitude1, txt_location_method102, txt_journey_method102, txt_time_to_location_type102, get_units102, geofanceDistence102, update_date1);        call.enqueue(new Callback<AddCoupan>() {            @Override            public void onResponse(@NonNull Call<AddCoupan> call, @NonNull Response<AddCoupan> response) {                binding.progressbarList.setVisibility(View.INVISIBLE);                Log.d("devi1A", "onResponse: " + response.raw());                if (response.code() == 200) {                    preferences.save(Addcoupon_activity.this, preferences.KEY_Type5, String.valueOf(1));                    SharedPreferences pref = getSharedPreferences("MySharedPref", MODE_PRIVATE);                    SharedPreferences.Editor myEdit = pref.edit();                    if (response.body().getCouponData() != null) {                        CouponData data = response.body().getCouponData();                        myEdit.putString("pay_uid", data.getUserId());                        myEdit.putString("pay_getid", data.getId());                        myEdit.putString("pay_titel", data.getCouponTitle());                        myEdit.putFloat("pay_budget", data.getOverallBudget());                        myEdit.apply();                        data_wipe();                        Log.d("devi8", "onResponse: " + data.getUserId());//                        add_payment();                        if (flag.equals("next")) {                            Intent get_payment = new Intent(Addcoupon_activity.this, Payment_method.class);                            get_payment.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            get_payment.putExtra("flag", "payment");                            startActivity(get_payment);                        } else if (flag.equals("save")) {                            add_payment();                        }                    } else {                        Log.d("devi1A", "onResponse: Your Data is null");                        Toast.makeText(Addcoupon_activity.this, "Your Data is null", Toast.LENGTH_SHORT).show();                    }                } else {                    Log.d("devi1A", "onResponse: 1 else");//                    Toast.makeText(Addcoupon_activity.this, " 1 else" + response.raw(), Toast.LENGTH_SHORT).show();                }            }            @Override            public void onFailure(@NonNull Call<AddCoupan> call, @NonNull Throwable t) {                Toast.makeText(Addcoupon_activity.this, "An Error Occurred", Toast.LENGTH_SHORT).show();                Log.d("devi1A", "onFailure: " + t);            }        });    }    private void EditData2(String couponTitle, String brand, String shop, String product, String service, String dealType, String currency, String launchDate, String launchTime, String expiryDate, String expiryTime, Boolean shared, Boolean singleUse, Integer maximumRedemptions, String address1, String address2, String town, String city, String postcode, String openingTimes, String messageGroup, String distance, String journeyType, Integer ageMin, Integer ageMax, String gender, Integer overTemperature, Integer underTemperature, Integer projectBudget, String distanceUnits, Integer distancenum, String locationType, String geofenceUnit, String terms, String weather, String timeToLocation, String showCalculations, Integer overallBudget, Integer maximumDailybudget, String country, String userId, String description, String marketingGroup, Integer normalPrice, Integer offerPrice, Boolean playPauseStatus, Integer budget, Float deliveryCost, String longitude, String latitude) {        ApiInterface apiInterface = RetrofitClient.getClient().create(ApiInterface.class);        RequestBody couponTitle1 = RequestBody.create(MediaType.parse("multipart/form-data"), couponTitle);        RequestBody brand1 = RequestBody.create(MediaType.parse("multipart/form-data"), brand);        RequestBody shop1 = RequestBody.create(MediaType.parse("multipart/form-data"), shop);        RequestBody product1 = RequestBody.create(MediaType.parse("multipart/form-data"), product);        RequestBody service1 = RequestBody.create(MediaType.parse("multipart/form-data"), service);        RequestBody dealType1 = RequestBody.create(MediaType.parse("multipart/form-data"), dealType);//        RequestBody offerText1 = RequestBody.create(MediaType.parse("multipart/form-data"), offerText);//        RequestBody percentageDiscount1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(percentageDiscount));        RequestBody currency1 = RequestBody.create(MediaType.parse("multipart/form-data"), currency);//        RequestBody priceSaving1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(priceSaving));//        RequestBody percentageSaving1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(percentageSaving));//        RequestBody longProd1 = RequestBody.create(MediaType.parse("multipart/form-data"), longProd);//        RequestBody serText1 = RequestBody.create(MediaType.parse("multipart/form-data"), serText);        RequestBody launchDate1 = RequestBody.create(MediaType.parse("multipart/form-data"), launchDate);        RequestBody launchTime1 = RequestBody.create(MediaType.parse("multipart/form-data"), launchTime);        RequestBody expiryDate1 = RequestBody.create(MediaType.parse("multipart/form-data"), expiryDate);        RequestBody expiryTime1 = RequestBody.create(MediaType.parse("multipart/form-data"), expiryTime);        RequestBody shared1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(shared));        RequestBody singleUse1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(singleUse));        RequestBody maximumRedemptions1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(maximumRedemptions));        RequestBody address11 = RequestBody.create(MediaType.parse("multipart/form-data"), address1);        RequestBody address21 = RequestBody.create(MediaType.parse("multipart/form-data"), address2);        RequestBody town1 = RequestBody.create(MediaType.parse("multipart/form-data"), town);        RequestBody city1 = RequestBody.create(MediaType.parse("multipart/form-data"), city);        RequestBody postcode1 = RequestBody.create(MediaType.parse("multipart/form-data"), postcode);        RequestBody openingTimes1 = RequestBody.create(MediaType.parse("multipart/form-data"), openingTimes);//        RequestBody message1 = RequestBody.create(MediaType.parse("multipart/form-data"), message);//        RequestBody market1 = RequestBody.create(MediaType.parse("multipart/form-data"), market);//        RequestBody profile1 = RequestBody.create(MediaType.parse("multipart/form-data"), profile);        RequestBody messageGroup1 = RequestBody.create(MediaType.parse("multipart/form-data"), messageGroup);        RequestBody distance1 = RequestBody.create(MediaType.parse("multipart/form-data"), distance);        RequestBody journeyType1 = RequestBody.create(MediaType.parse("multipart/form-data"), journeyType);//        RequestBody journeyTime1 = RequestBody.create(MediaType.parse("multipart/form-data"), journeyTime);        RequestBody ageMin1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(ageMin));        RequestBody ageMax1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(ageMax));        RequestBody gender1 = RequestBody.create(MediaType.parse("multipart/form-data"), gender);        RequestBody overTemperature1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(overTemperature));        RequestBody underTemperature1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(underTemperature));        RequestBody projectBudget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(projectBudget));//        RequestBody projectCurrency1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(projectCurrency));//        RequestBody dailyBudget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(dailyBudget));//        RequestBody playPauseStatus1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(playPauseStatus));//        RequestBody mapPin1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(mapPin));//        RequestBody journey1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(journey));        RequestBody distanceUnits1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(distanceUnits));        RequestBody distancenum1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(distancenum));        RequestBody locationType1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(locationType));//        RequestBody journeyTyep1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(journeyTyep));        RequestBody geofenceUnit1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(geofenceUnit));        RequestBody terms1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(terms));        RequestBody weather1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(weather));        RequestBody timeToLocation1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(timeToLocation));//        RequestBody budget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(budget));//        RequestBody deliveryCost1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(deliveryCost));//        RequestBody deal1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(deal));        RequestBody showCalculations1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(showCalculations));        RequestBody overallBudget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(overallBudget));        RequestBody maximumDailybudget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(maximumDailybudget));        RequestBody country1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(country));        RequestBody userId1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(userId));        RequestBody description1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(description));//        RequestBody lastgroup1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(myList));//        RequestBody lastlolcation21 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(location));        RequestBody normalPrice1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(normalPrice));        RequestBody offerPrice1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(offerPrice));        RequestBody playPauseStatus1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(playPauseStatus));        RequestBody budget1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(budget));        RequestBody deliveryCost1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(deliveryCost));        RequestBody longitude1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(longitude));        RequestBody latitude1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(latitude));        RequestBody marketgroup1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(marketingGroup));        SharedPreferences sh = getSharedPreferences("MySharedPref", Context.MODE_PRIVATE);        String coupon_id1 = sh.getString("coupon_id", "");        String url_coupon_iamge = sh.getString("url_coupon_iamge", "");        Log.d("part123", "EditData2: " + coupon_id1);        RequestBody edit_coupon_id = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(coupon_id1));        RequestBody url_coupon_iamge1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(url_coupon_iamge));        String formated_date = sh.getString("terms_date", "");        RequestBody formattedDate1 = RequestBody.create(MediaType.parse("multipart/form-data"), String.valueOf(formated_date));        Log.d("part123", "EditData2: " + part + edit_coupon_id);        Log.d("part123", "EditData2: " + part + edit_coupon_id);//        Log.d("part123", "EditData2: " + coupon_id1);        Call<EditData> call = apiInterface.Editcoupan(couponTitle1, brand1, shop1, product1, service1, dealType1, currency1, launchDate1, launchTime1, expiryDate1, expiryTime1, shared1, singleUse1, maximumRedemptions1, address11, address21, town1, city1, postcode1, openingTimes1, distance1, journeyType1, ageMin1, ageMax1, gender1, overTemperature1, underTemperature1, projectBudget1, distanceUnits1, distancenum1, locationType1, geofenceUnit1, terms1, weather1, timeToLocation1, showCalculations1, overallBudget1, maximumDailybudget1, country1, userId1, description1, normalPrice1, offerPrice1, playPauseStatus1, budget1, deliveryCost1, longitude1, latitude1, edit_coupon_id, part, formattedDate1, part2, messageGroup1, marketgroup1);        call.enqueue(new Callback<EditData>() {            @Override            public void onResponse(@NonNull Call<EditData> call, @NonNull Response<EditData> response) {                Log.d("devi1A", "onResponse: " + response.raw());//                Toast.makeText(Addcoupon_activity.this, "" + response.raw(), Toast.LENGTH_SHORT).show();//                Toast.makeText(Addcoupon_activity.this, "" + response.body(), Toast.LENGTH_SHORT).show();//                Toast.makeText(Addcoupon_activity.this, "" + response.message(), Toast.LENGTH_SHORT).show();                Log.d("respomse_data", "onResponse: " + response.raw());                Log.d("respomse_data", "onResponse: " + response.body());                Log.d("respomse_data", "onResponse: " + response.message());                if (response.code() == 200) {                    Toast.makeText(Addcoupon_activity.this, "YOUR COUPON IS SUCCESSFULLY EDITED", Toast.LENGTH_SHORT).show();                    SharedPreferences pref = getSharedPreferences("MySharedPref", MODE_PRIVATE);                    SharedPreferences.Editor myEdit = pref.edit();                    preferences.save(Addcoupon_activity.this, preferences.KEY_Type5, String.valueOf(1));                    if (response.body().getData() != null) {                        edit_success_dialog("YOUR COUPON IS SUCCESSFULLY EDITED");                        data_wipe();//                        Handler handler = new Handler();//                        handler.postDelayed(new Runnable() {//                            @Override//                            public void run() {//                                binding.progressbarList.setVisibility(View.INVISIBLE);////                                Intent get_main = new Intent(Addcoupon_activity.this, MainActivity.class);//                                get_main.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);//                                startActivity(get_main);////                            }//                        }, 2000);                    } else {                        Log.d("devi1A", "onResponse: Your Data is null");                        Toast.makeText(Addcoupon_activity.this, "Your Data is null", Toast.LENGTH_SHORT).show();                    }                } else {                    Log.d("devi1A", "onResponse: 1 else");//                    Toast.makeText(Addcoupon_activity.this, " 1 else" + response.raw(), Toast.LENGTH_SHORT).show();                }            }            @Override            public void onFailure(@NonNull Call<EditData> call, @NonNull Throwable t) {                Toast.makeText(Addcoupon_activity.this, "An Error Occurred", Toast.LENGTH_SHORT).show();                Log.d("devi1A", "onFailure: " + t);            }        });    }    private void selectImage() {        Intent i = new Intent();        i.setType("image/*");        i.setAction(Intent.ACTION_GET_CONTENT);        startActivityForResult(Intent.createChooser(i, "Select Picture"), GALLERY_REQ_CODE);    }    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            if (requestCode == GALLERY_REQ_CODE) {                Uri selectedImageUri = data.getData();                SharedPreferences pref = getSharedPreferences("MySharedPref", MODE_PRIVATE);                SharedPreferences.Editor myEdit = pref.edit();                myEdit.putString("selectedImageUri1", String.valueOf(selectedImageUri));                myEdit.apply();                if (null != selectedImageUri) {                    bitmap = BitmapFactory.decodeFile(String.valueOf(selectedImageUri));                    try {                        InputStream inputStream = getContentResolver().openInputStream(selectedImageUri);                        bitmap = BitmapFactory.decodeStream(inputStream);                        binding.imgFromUser.setImageBitmap(bitmap);                        String btos = BitMapToString(bitmap);                        preferences.save(Addcoupon_activity.this, preferences.KEY_Bitmap, String.valueOf(btos));                    } catch (FileNotFoundException e) {                        e.printStackTrace();                    }                    Log.d("most_uri 1 ", "onCreate: " + selectedImageUri);                    File file = new File(getRealPathFromURI(selectedImageUri, getApplicationContext()));                    RequestBody requestBody = RequestBody.create(MediaType.parse("image/"), file);                    part = MultipartBody.Part.createFormData("couponImage", file.getName(), requestBody);                    Log.d("final files", "onActivityResult: " + file);                    Log.d("filepath", "onActivityResult: " + file.getName());                    Log.d("final files on ", "onActivityResult: " + part);                    campareImage = "new";                    preferences.save(Addcoupon_activity.this, preferences.KEY_Part, String.valueOf(part));                    preferences.save(Addcoupon_activity.this, preferences.KEY_File, String.valueOf(file));                }            }        }    }    @NonNull    public final String getRealPathFromURI(@NotNull Uri uri, @NotNull Context context) {        Intrinsics.checkNotNullParameter(uri, "uri");        Intrinsics.checkNotNullParameter(context, "context");        Cursor returnCursor = context.getContentResolver().query(uri, (String[]) null, (String) null, (String[]) null, (String) null);        Intrinsics.checkNotNull(returnCursor);        int nameIndex = returnCursor.getColumnIndex("_display_name");        int sizeIndex = returnCursor.getColumnIndex("_size");        returnCursor.moveToFirst();        String name = returnCursor.getString(nameIndex);        String size = String.valueOf(returnCursor.getLong(sizeIndex));        File file = new File(context.getFilesDir(), name);        try {            InputStream inputStream = context.getContentResolver().openInputStream(uri);            FileOutputStream outputStream = new FileOutputStream(file);            int read = 0;            int maxBufferSize = 1048576;            int bytesAvailable = inputStream != null ? inputStream.available() : 0;            int bufferSize = Math.min(bytesAvailable, maxBufferSize);            byte[] buffers = new byte[bufferSize];            while (true) {                Integer var16 = inputStream != null ? inputStream.read(buffers) : null;                boolean var18 = false;                if (var16 != null) {                    read = var16;                }                if (var16 != null) {                    if (var16 == -1) {                        Log.e("File Size", "Size " + file.length());                        if (inputStream != null) {                            inputStream.close();                        }                        outputStream.close();                        Log.e("File Path", "Path " + file.getPath());                        break;                    }                }                outputStream.write(buffers, 0, read);            }        } catch (Exception var19) {            String var10001 = var19.getMessage();            Intrinsics.checkNotNull(var10001);            Log.e("Exception", var10001);        }        return file.getPath();    }    public void id_vise_coupon_data(String ids) {        SharedPreferences pref = getSharedPreferences("MySharedPref", MODE_PRIVATE);        SharedPreferences.Editor myEdit = pref.edit();        OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder();        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        clientBuilder.addInterceptor(loggingInterceptor);        Retrofit retrofit = new Retrofit.Builder()                .baseUrl("http://54.90.77.44:8000/coupon/")                .addConverterFactory(ScalarsConverterFactory.create())                .addConverterFactory(GsonConverterFactory.create())                .build();        ApiInterface apiInterface = retrofit.create(ApiInterface.class);        try {            String id = ids;            JSONObject paramObject = new JSONObject();            paramObject.put("id", id);            Log.d("devi123", "onCreate: " + paramObject);            Call<IdwiseCoupon> userCall = apiInterface.get_id_wise_data(String.valueOf(paramObject));            userCall.enqueue(new Callback<IdwiseCoupon>() {                @SuppressLint("SetTextI18n")                @Override                public void onResponse(Call<IdwiseCoupon> call, Response<IdwiseCoupon> response) {                    Log.d("viru_qrcode", "onResponse: " + response.raw());//                    Toast.makeText(Addcoupon_activity.this, "" + response.raw(), Toast.LENGTH_SHORT).show();                    if (response.code() == 200) {//                      Toast.makeText(Addcoupon_activity.this, "" + response.raw(), Toast.LENGTH_SHORT).show();                        //Add coupon Data//                        Toast.makeText(Addcoupon_activity.this, "Share Edit data", Toast.LENGTH_SHORT).show();                        preferences.save(Addcoupon_activity.this, preferences.KEY_lbitmap, String.valueOf(""));                        preferences.save(Addcoupon_activity.this, preferences.KEY_Bitmap, String.valueOf(""));                        preferences.save(Addcoupon_activity.this, preferences.KEY_File, String.valueOf(""));                        preferences.save(Addcoupon_activity.this, preferences.KEY_Location_File, String.valueOf(""));                        String title = response.body().getCouponData().getCouponTitle();                        String Copon_image = (String) response.body().getCouponData().getCouponImage();                        String brand = response.body().getCouponData().getBrand();                        String Product = response.body().getCouponData().getProduct();                        String budget = String.valueOf(response.body().getCouponData().getBudget());                        String overall_budget = String.valueOf(response.body().getCouponData().getOverallBudget());                        String delivery_cost = String.valueOf(response.body().getCouponData().getDeliveryCost());                        String coupon_id1 = response.body().getCouponData().getId();                        String userid = response.body().getCouponData().getUserId();//                        Boolean otherShared = response.body().getCouponData().getOtherShared();                        String edt_entermaximumbudget = String.valueOf(response.body().getCouponData().getMaximumDailybudget());//                        String share_id = response.body().getCouponData().get//                        Toast.makeText(Addcoupon_activity.this, "otherShared "+otherShared, Toast.LENGTH_SHORT).show();                        //play pause status                        boolean status = response.body().getCouponData().getPlayPauseStatus();//                        Toast.makeText(Addcoupon_activity.this, "id_wise  " + status, Toast.LENGTH_SHORT).show();                        myEdit.putBoolean("status", status);                        myEdit.apply();//                        boolean status = sh.getBoolean("status", true);//                        Toast.makeText(Addcoupon_activity.this, "status  " + status, Toast.LENGTH_SHORT).show();                        if (status) {                            binding.btnPay.setVisibility(View.GONE);                            binding.btnPause.setVisibility(View.VISIBLE);                        } else {                            binding.btnPause.setVisibility(View.GONE);                            binding.btnPay.setVisibility(View.VISIBLE);                        }                        myEdit.putString("coupon_id", coupon_id1);                        myEdit.putString("Coupon_image", Copon_image);                        Log.d("coupon_id123", "onResponse: " + coupon_id1);                        myEdit.apply();//                        myEdit.putBoolean("otherShared", otherShared);                        //is payment success and not                        boolean payment_success = response.body().getCouponData().getIsPayment();                        myEdit.putBoolean("payment_success", payment_success);                        if (payment_success) {                            binding.btnNext.setVisibility(View.GONE);                        } else {                            binding.btnNext.setVisibility(View.VISIBLE);                        }                        myEdit.apply();                        SharedPreferences pref = getSharedPreferences("MySharedPref", MODE_PRIVATE);                        myEdit.putString("title", title);                        myEdit.putString("Copon_image", Copon_image);                        myEdit.putString("brand", brand);                        myEdit.putString("Product", Product);                        myEdit.putString("budget", budget);                        myEdit.putString("overall_budget", overall_budget);                        myEdit.putString("delivery_cost", delivery_cost);                        myEdit.putString("userid", userid);                        myEdit.putString("edt_entermaximumbudget", edt_entermaximumbudget);                        myEdit.apply();                        Log.d("devi90 1", "onResponse: " + pref.getString("Copon_image", ""));                        //Deal Acivity data                        String deal_type = response.body().getCouponData().getDealType();                        String currency = response.body().getCouponData().getCurrency();                        String regular_price = String.valueOf(response.body().getCouponData().getNormalPrice());                        String offer_price = String.valueOf(response.body().getCouponData().getOfferPrice());                        String calculation = response.body().getCouponData().getShowCalculations();                        String launchdate = response.body().getCouponData().getLaunchDate();                        String lh_date = launchdate.substring(0, 10);                        String[] launch_date2 = lh_date.split("-");                        String launch_date_year = launch_date2[0];                        String launch_date_month = launch_date2[1];                        String launch_date_date = launch_date2[2];                        String last_launch_date = launch_date_date + "/" + launch_date_month + "/" + launch_date_year + " ";                        String[] launch_time = launchdate.split("T");                        String final_launch_time = launch_time[1];                        String launch_time_1 = final_launch_time.substring(0, 5);//                        Currency currency1 = Currency.getInstance(currency);//                        String symbol = currency1.getSymbol();//                        Log.d("currency_symbol", "onResponse: " + symbol);//                        Log.d("currency_symbol", "onResponse: " + currency);//                        myEdit.putString("currency_symbol", symbol);//                        binding.currencySymbol.setText(symbol);                        myEdit.putString("launchdate_edit", launchdate);                        myEdit.putString("launch_date_date", launch_date_date);                        myEdit.putString("launch_date_month", launch_date_month);                        myEdit.putString("launch_month_num", launch_date_month);                        myEdit.putString("launch_date_year", launch_date_year);//                        Toast.makeText(Addcoupon_activity.this, "m "+launch_date_month, Toast.LENGTH_SHORT).show();                        myEdit.putString("launch_date_date_api", launch_date_date);                        myEdit.putString("launch_date_month_api", launch_date_month);                        myEdit.putString("launch_date_year_api", launch_date_year);                        myEdit.putString("launch_time_1", launch_time_1);                        myEdit.apply();                        String exprirydate = response.body().getCouponData().getExpiryDate();                        String ex_date = exprirydate.substring(0, 10);                        String[] expiry_date2 = ex_date.split("-");                        String expiry_year = expiry_date2[0];                        String expiry_month = expiry_date2[1];                        String expiry_date = expiry_date2[2];                        String last_expiry_date = expiry_date + "/" + expiry_month + "/" + expiry_year + " ";                        String[] expiry_time = exprirydate.split("T");                        String final_expiry_time = expiry_time[1];                        String expiry_time_1 = final_expiry_time.substring(0, 5);                        myEdit.putString("exprirydate_edit", exprirydate);                        myEdit.putString("expiry_date", expiry_date);                        myEdit.putString("expiry_launch_monthnu", expiry_month);                        myEdit.putString("expiry_year", expiry_year);                        myEdit.putString("expiry_time_1", expiry_time_1);                        myEdit.apply();//                        Toast.makeText(Addcoupon_activity.this, ""+expiry_month, Toast.LENGTH_SHORT).show();                        String description = response.body().getCouponData().getDescription();                        Boolean can_share = response.body().getCouponData().getShared();                        Boolean getSingleUse = response.body().getCouponData().getSingleUse();                        String maximum_redumption = String.valueOf(response.body().getCouponData().getMaximumRedemptions());                        String terms_date = response.body().getCouponData().getTermsDate();                        myEdit.putString("terms_date", terms_date);                        //target activity data                        String market_group = String.valueOf(response.body().getCouponData().getMarketingGroup());                        String message_group = String.valueOf(response.body().getCouponData().getMessageGroup());                        String min_age = String.valueOf(response.body().getCouponData().getAgeMin());                        String max_age = String.valueOf(response.body().getCouponData().getAgeMax());                        String gender = response.body().getCouponData().getGender();                        String weather = response.body().getCouponData().getWeather();                        String min_temp = String.valueOf(response.body().getCouponData().getUnderTemperature());                        String max_temp = String.valueOf(response.body().getCouponData().getOverTemperature());                        String location_mthod = response.body().getCouponData().getLocationType();                        String journey_type = response.body().getCouponData().getJourneyType();                        String distanceUnits = response.body().getCouponData().getDistanceUnits();                        String distancenum = String.valueOf(response.body().getCouponData().getDistancenum());                        String journeyTime = response.body().getCouponData().getTimeToLocation();                        //location activity                        String adress1 = response.body().getCouponData().getAddress1();                        String adress2 = response.body().getCouponData().getAddress2();                        String town_city = response.body().getCouponData().getCity();                        String country = response.body().getCouponData().getCountry();                        String opening_time = response.body().getCouponData().getOpeningTimes();                        String latitude = response.body().getCouponData().getLatitude();                        String longitude = response.body().getCouponData().getLongitude();                        String location_image = (String) response.body().getCouponData().getAddressImage();                        String postcode = response.body().getCouponData().getPostcode();                        String opening_times = response.body().getCouponData().getOpeningTimes();                        String deal = response.body().getCouponData().getDeal();                        myEdit.putString("deal", deal);//                        Toast.makeText(Addcoupon_activity.this, "" + deal, Toast.LENGTH_SHORT).show();                        binding.txtDealDiscount.setText(deal);                        binding.txtLocationMap.setText(town_city + ", " + country);                        myEdit.putString("location_mthod", location_mthod);                        myEdit.apply();                        binding.txtTargetSet.setText(location_mthod);                        String lat, lang;                        Log.d("lat_lang", "onRespoGnse: 1" + latitude + longitude);                        if (latitude.equals("") || latitude.isEmpty() || latitude == null || longitude.equals("") || longitude.isEmpty() || longitude == null) {                            Log.d("lat_lang", "onResponse:2 " + latitude + longitude);                            lat = "0";                            lang = "0";                        } else {                            Log.d("lat_lang", "onResponse: 3" + latitude + longitude);                            lat = latitude;                            lang = longitude;                        }                        //terms activity                        String terms = response.body().getCouponData().getTerms();//                        String coupon_id = response.body().getCouponData().getId();                        Log.d("id_wise_data132", "onResponse: " + title + " " + brand + " " + Product + " " + budget + " " + currency + " " + offer_price + " " + calculation + " " + regular_price + " " + lh_date + " " + launch_time_1 + " " + ex_date + " " + expiry_time_1 + " " +                                /* exprirytime + */" " + can_share + " " + getSingleUse + " " + maximum_redumption + " " + location_mthod + " " + journey_type + " " + min_age + max_age + " " + gender + " " + weather + " " + distanceUnits + " " + distancenum + " " + journeyTime + " " + min_temp + " " + max_temp + " " + adress1 + " " + adress2 + " " + town_city + " " + country + " " + opening_time + " " + latitude + " " + longitude + " " + location_image + " " + postcode + " " + opening_times);                        URL url_coupon_iamge = null;                        try {                            url_coupon_iamge = new URL(Copon_image);                        } catch (MalformedURLException e) {                            e.printStackTrace();                        }                        Glide.with(Addcoupon_activity.this).load(url_coupon_iamge).into(binding.imgFromUser);//                        Picasso.get().load(String.valueOf(url_coupon_iamge)).into(binding.imgCouponWindow);                        myEdit.putString("url_coupon_iamge", String.valueOf(url_coupon_iamge));                        myEdit.apply();                        binding.edtEnterTitle.setText(title);                        binding.edtEnterProduct.setText(Product);                        binding.edtEnterShop.setText(brand);                        binding.txtBudgetPrice.setText(overall_budget);//                        binding.txtDeliveryCharge.setText(delivery_cost);//                        Log.d("deal_data", "onResponse: " + calculation + launchdate + launctime + exprirydate + exprirytime + can_share + getSingleUse + maximum_redumption);                        myEdit.putString("currency", currency);                        myEdit.putString("dealtype", deal_type);                        myEdit.putString("regular_price", regular_price);                        myEdit.putString("offer_price", offer_price);                        myEdit.putString("calculation", calculation);                        myEdit.putString("launchdate", last_launch_date);                        myEdit.putString("final_launch_time", launch_time_1);                        myEdit.putString("exprirydate", last_expiry_date);                        myEdit.putString("final_expiry_time", expiry_time_1);                        myEdit.putString("description", description);                        myEdit.putString("maximum_redumption", maximum_redumption);                        boolean share1 = response.body().getCouponData().getShared();                        Log.d("share1", "onCreate: " + share1);                        if (share1) {                            myEdit.putString("share", "Yes");                            myEdit.apply();                        } else {                            myEdit.putString("share", "No");                            myEdit.apply();                        }                        boolean use1 = response.body().getCouponData().getSingleUse();                        Log.d("use1", "onCreate: " + use1);                        if (use1) {                            myEdit.putString("single", "Yes");                            myEdit.apply();                        } else {                            myEdit.putString("single", "No");                            myEdit.apply();                        }                        myEdit.putString("address1", adress1);                        myEdit.putString("address2", adress2);                        myEdit.putString("town_city", town_city);                        if (country == null) {//                            Toast.makeText(Addcoupon_activity.this, "null", Toast.LENGTH_SHORT).show();                        } else {                            if (country.equals("UK")) {                                myEdit.putString("country", "United Kingdom");                            } else {                                myEdit.putString("country", country);                            }                        }                        myEdit.putString("opening_time", opening_time);                        myEdit.putString("edit_latitude", lat);                        myEdit.putString("edit_longitude", lang);                        myEdit.putString("location_image", location_image);                        myEdit.putString("postcode", postcode);                        myEdit.putString("opening_times", opening_times);                        //terms activity                        myEdit.putString("terms", terms);                        myEdit.putString("coupon_id", coupon_id1);                        //target activity                        myEdit.putString("method", location_mthod);                        myEdit.putString("miiin", min_age);                        myEdit.putString("maxxxx", max_age);                        myEdit.putString("gender", gender);                        myEdit.putString("weather", weather);                        myEdit.putString("tempmin", min_temp);                        myEdit.putString("tempmax", max_temp);                        myEdit.putString("market_group", market_group);                        myEdit.putString("marketGropuArray", market_group);                        myEdit.putString("messageGropuArray", message_group);                        myEdit.putString("units", distanceUnits);                        myEdit.putString("distancenum", distancenum);                        myEdit.putString("journeyTime", journeyTime);                        myEdit.putString("journey", journey_type);                        //for share coupon                        String id1 = response.body().getCouponData().getId();                        String user_id = response.body().getCouponData().getUserId();                        String share_userid = String.valueOf(response.body().getCouponData().getShareUserID());                        myEdit.putString("id1", id1);                        myEdit.putString("user_id", user_id);                        myEdit.putString("share_userid", share_userid);                        myEdit.apply();                        binding.progressbarList.setVisibility(View.GONE);                    } else {                        Toast.makeText(Addcoupon_activity.this, "An Error Occurred", Toast.LENGTH_SHORT).show();                    }                }                @Override                public void onFailure(Call<IdwiseCoupon> call, Throwable t) {                    Log.d("error_failure", "onFailure: " + "an error occurred" + " " + t);//                    Toast.makeText(Addcoupon_activity.this, "" + t, Toast.LENGTH_SHORT).show();                }            });        } catch (JSONException e) {            e.printStackTrace();        }    }    public void add_payment() {        new AlertDialog.Builder(this).setTitle("Payment Method").setMessage("Do You Want To Pay Now?").setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                Intent intent = new Intent(Addcoupon_activity.this, MainActivity.class);                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                startActivity(intent);            }        }).setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {            public void onClick(DialogInterface arg0, int arg1) {                Intent intent = new Intent(Addcoupon_activity.this, Payment_method.class);                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                intent.putExtra("flag", "payment");                startActivity(intent);            }        }).create().show();    }    public static Bitmap convertStringToBitmap(String string) {        byte[] byteArray1;        byteArray1 = Base64.decode(string, Base64.DEFAULT);        Bitmap bmp = BitmapFactory.decodeByteArray(byteArray1, 0, byteArray1.length);/* w  w  w.ja va 2 s  .  c om*/        return bmp;    }    public String BitMapToString(Bitmap bitmap) {        ByteArrayOutputStream baos = new ByteArrayOutputStream();        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);        byte[] b = baos.toByteArray();        String temp = Base64.encodeToString(b, Base64.DEFAULT);        return temp;    }    public Bitmap StringToBitMap(String encodedString) {        try {            byte[] encodeByte = Base64.decode(encodedString, Base64.DEFAULT);            Bitmap bitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);            return bitmap;        } catch (Exception e) {            e.getMessage();            return null;        }    }    public MultipartBody.Part createpart(String filesles) {        MultipartBody.Part newparts;        File file223 = new File(filesles);        Log.d("final files 3 f ", "onCreate: " + file223);        RequestBody requestBody = RequestBody.create(MediaType.parse("image/"), file223);        newparts = MultipartBody.Part.createFormData("couponImage", file223.getName(), requestBody);        Log.d("final files 5 pp ", "onCreate: " + newparts);        return newparts;    }    public MultipartBody.Part editcreatepart(String filesles) {        MultipartBody.Part newparts;        File file223 = new File(filesles);        Log.d("final files 3 f ", "onCreate: " + file223);        RequestBody requestBody = RequestBody.create(MediaType.parse("image/"), file223);        newparts = MultipartBody.Part.createFormData("couponImage", file223.getName(), requestBody);        Log.d("final files 5 pp ", "onCreate: " + newparts);        return newparts;    }    public MultipartBody.Part createpart2(String filesles) {        MultipartBody.Part newparts;        File file223 = new File(filesles);        Log.d("final files 3 f ", "onCreate: " + file223);        RequestBody requestBody = RequestBody.create(MediaType.parse("image/"), file223);        newparts = MultipartBody.Part.createFormData("addressImage", file223.getName(), requestBody);        Log.d("final files 5 pp ", "onCreate: " + newparts);        return newparts;    }    public class GetImageFromUrl extends AsyncTask<String, Void, Bitmap> {        ImageView imageView;        public GetImageFromUrl() {            Log.d("devi1 9", "GetImageFromUrl: ");        }        @Override        public Bitmap doInBackground(String... url) {            String stringUrl = url[0];//            bitmap = null;            InputStream inputStream;            try {                inputStream = new java.net.URL(stringUrl).openStream();                bitmap5 = BitmapFactory.decodeStream(inputStream);            } catch (IOException e) {                Log.d("getFileFromBitmap try", "doInBackground: " + e);                e.printStackTrace();            }            return bitmap5;        }        @Override        protected void onPostExecute(Bitmap bitmap) {            super.onPostExecute(bitmap);            binding.imgFromUser.setImageBitmap(bitmap);            Log.d("devi1 bit", "onPostExecute: " + bitmap);            bt7 = bitmap;        }    }    public class GetImageFromUrl3 extends AsyncTask<String, Void, Bitmap> {        ImageView imageView;        public GetImageFromUrl3() {            Log.d("devi1 9", "GetImageFromUrl: ");        }        @Override        public Bitmap doInBackground(String... url) {            String stringUrl = url[0];//            bitmap = null;            InputStream inputStream;            try {                inputStream = new java.net.URL(stringUrl).openStream();                bitmap5 = BitmapFactory.decodeStream(inputStream);            } catch (IOException e) {                Log.d("getFileFromBitmap try", "doInBackground: " + e);                e.printStackTrace();            }            return bitmap5;        }        @Override        protected void onPostExecute(Bitmap bitmap) {            super.onPostExecute(bitmap);//            binding.imgFromUser.setImageBitmap(bitmap);            Log.d("devi1 bit", "onPostExecute: " + bitmap);            bt8 = bitmap;        }        public int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {            // Raw height and width of image            final int height = options.outHeight;            final int width = options.outWidth;            int inSampleSize = 1;            if (height > reqHeight || width > reqWidth) {                final int halfHeight = height / 2;                final int halfWidth = width / 2;                while ((halfHeight / inSampleSize) >= reqHeight && (halfWidth / inSampleSize) >= reqWidth) {                    inSampleSize *= 2;                }            }            return inSampleSize;        }    }    @Override    public void onBackPressed() {        if (mapping.equals("1")) {//            Intent get_back = new Intent(Addcoupon_activity.this, MainActivity.class);//            get_back.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);//            startActivity(get_back);            super.onBackPressed();        } else {            super.onBackPressed();            data_wipe();        }//        super.onBackPressed();    }    public void edit_success_dialog(String message) {        new AlertDialog.Builder(this).setTitle("Coupon Edit").setMessage(message).setCancelable(false)                .setNeutralButton("OK", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        Intent get_main = new Intent(Addcoupon_activity.this, MainActivity.class);                        get_main.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                        startActivity(get_main);                    }                }).create().show();    }    public void data_wipe() {        preferences.save(Addcoupon_activity.this, preferences.KEY_File, String.valueOf(""));        preferences.save(Addcoupon_activity.this, preferences.KEY_Location_File, String.valueOf(""));        preferences.save(Addcoupon_activity.this, preferences.KEY_COUPON_TITLE, String.valueOf(""));        preferences.save(Addcoupon_activity.this, preferences.KEY_PRODUCT_NAME, String.valueOf(""));        preferences.save(Addcoupon_activity.this, preferences.KEY_BRAND_NAME, String.valueOf(""));//        preferences.save(Addcoupon_activity.this, preferences.KEY_Location_File, String.valueOf(""));        SharedPreferences pref = getSharedPreferences("MySharedPref", MODE_PRIVATE);        SharedPreferences.Editor myEdit = pref.edit();        preferences.save(Addcoupon_activity.this, preferences.KEY_lbitmap, String.valueOf(""));        preferences.save(Addcoupon_activity.this, preferences.KEY_Bitmap, String.valueOf(""));        preferences.save(Addcoupon_activity.this, preferences.KEY_Type3, String.valueOf(""));        preferences.save(Addcoupon_activity.this, preferences.KEY_Type5, String.valueOf(1));        preferences.save(Addcoupon_activity.this, preferences.KEY_Location_File, String.valueOf(""));        myEdit.putString("Array_location", "");        myEdit.putString("launch_year", "");        myEdit.putString("launch_month", "");        myEdit.putString("launch_date", "");        myEdit.putString("launch_time", "");        myEdit.putString("selectedImageUri1", "1");        myEdit.putString("latitude", "");        myEdit.putString("longitude", "");        myEdit.putString("country", "");        myEdit.putString("address1", "");        myEdit.putString("address2", "");        myEdit.putString("town_city", "");        myEdit.putString("postcode", "");        myEdit.putString("opening_times", "");        myEdit.putString("expiry_launch_year", "");        myEdit.putString("expiry_launch_month", "");        myEdit.putString("expiry_launch_date", "");        myEdit.putString("expiry_launch_time", "");        myEdit.putString("return", "");        myEdit.putString("new_location", "first");        myEdit.putString("edt_enter_overallbudget", "");        myEdit.putString("key_coupon_title", "");        myEdit.putString("key_brand_name", "");        myEdit.putString("key_product_name", "");        myEdit.putString("edt_entermaximumbudget", "");        myEdit.putString("edtTermsDescription", "");        myEdit.putString("txt_location_method_target", "");        myEdit.putString("txt_journey_method_target", "");        myEdit.putString("get_units_target", "");        myEdit.putString("get_distance_target", "");        myEdit.putString("txt_time_to_location_type_target", "");        myEdit.putString("txt_gender_type_target", "");        myEdit.putString("txt_weather_type_target", "");        myEdit.putString("txt_min_age_target", "");        myEdit.putString("txt_max_age_target", "");        myEdit.putString("txt_min_temp_target", "");        myEdit.putString("txt_max_temp_target", "");        myEdit.putString("return", "");        myEdit.putString("gender", "");        myEdit.putString("min_age", "");        myEdit.putString("weather", "");        myEdit.putString("max_age", "");        myEdit.putString("min_temp", "");        myEdit.putString("max_temp", "");        myEdit.putString("journey", "");        myEdit.putString("method", "");        myEdit.putString("units", "");        myEdit.putString("Rprice", "");        myEdit.putString("offerpricce", "");        myEdit.putString("Dessss", "");        myEdit.putString("maxi", "");        myEdit.putString("launch_month_num", "");        myEdit.putString("marketGropuArray", "");        myEdit.putString("dealtype", "");        myEdit.putString("usd", "");        myEdit.putString("calculation", "");        myEdit.putString("share", "");        myEdit.putString("use", "");        myEdit.putString("D1", "");        myEdit.putString("D2", "");        myEdit.putString("maxxxx", "");        myEdit.putString("miiin", "");        myEdit.putString("tempmin", "");        myEdit.putString("tempmax", "");        myEdit.putString("edit_latitude", "");        myEdit.putString("edit_longitude", "");        myEdit.putString("terms_date", "");        myEdit.putString("address_image", "");        myEdit.putString("messageGropuArray", "");        myEdit.putString("marketGropuArray", "");//        myEdit.putString("Copon_image", "");        myEdit.putString("single", "");        myEdit.putString("flag_val", "");        myEdit.apply();    }//     Snackbar.make(viewPager, "Press Again to Exit", Snackbar.LENGTH_LONG).show();    public String getCountryCode(String countryName) {        String[] isoCountryCodes = Locale.getISOCountries();        Map<String, String> countryMap = new HashMap<>();        Locale locale;        String name;        for (String code : isoCountryCodes) {            locale = new Locale("", code);            name = locale.getDisplayCountry();            countryMap.put(name, code);        }//        Toast.makeText(this, "" + countryMap.get(countryName), Toast.LENGTH_SHORT).show();//        String currency_type1 = Currency.getInstance(new Locale("", countryMap.get(countryName))).getCurrencyCode();        return countryMap.get(countryName);    }    @SuppressLint("ObsoleteSdkInt")    public void checkPermission() {        if (Build.VERSION.SDK_INT >= 23) {            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) ==                    PackageManager.PERMISSION_GRANTED &&                    checkSelfPermission(Manifest.permission.MANAGE_EXTERNAL_STORAGE) ==                            PackageManager.PERMISSION_GRANTED) {            } else {                ActivityCompat.requestPermissions(this, new String[]{                        Manifest.permission.WRITE_EXTERNAL_STORAGE,                        Manifest.permission.MANAGE_EXTERNAL_STORAGE,}, 1);            }        }    }}